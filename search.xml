<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java集合框架</title>
    <url>/2022/01/15/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h1><hr>
<ul>
<li><strong>概念</strong>：对象的容器，定义了对多个对象进项操作的的常用方法。可实现数组的功能。</li>
<li><strong>和数组的区别</strong>：</li>
</ul>
<ol>
<li>数组长度固定，集合长度不固定。</li>
<li>数组可以存储基本类型和引用类型，集合只能存储引用类型。</li>
</ol>
<ul>
<li><strong>位置</strong>： java.util.*;</li>
</ul>
<span id="more"></span>


    <div id="aplayer-tQQqgJWl" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1834823818" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555" data-volume="0.1"
    ></div>

<p><img src="https://pic.imgdb.cn/item/5f9912e21cd1bbb86b6c3035.png" alt="Collection体系集合"></p>
<h2 id="Collection-Parent-interface"><a href="#Collection-Parent-interface" class="headerlink" title="Collection Parent interface"></a>Collection Parent interface</h2><hr>
<ul>
<li><strong>特点</strong>：代表一组任意类型的对象，无序、无下标、不能重复。</li>
<li><strong>方法</strong>：<ul>
<li><code>boolean add(Object obj) //添加一个对象。</code></li>
<li><code>boolean addAll(Collection c) //讲一个集合中的所有对象添加到此集合中。</code></li>
<li><code>void clear() //清空此集合中的所有对象。</code></li>
<li><code>boolean contains(Object o) //检查此集合中是否包含o对象。</code></li>
<li><code>boolean equals(Object o) //比较此集合是否与指定对象相等。</code></li>
<li><code>boolean isEmpty() //判断此集合是否为空。</code></li>
<li><code>boolean remove(Object o) //在此集合中移除o对象。</code></li>
<li><code>int size() //返回此集合中的元素个数。</code></li>
<li><code>Object[] toArray() //姜此集合转换成数组。</code></li>
</ul>
</li>
</ul>
<p><strong>小技巧：sout是System.out.println()快捷键；xxx.for是for循环快捷键</strong>；<strong>alt+enter引入局部变量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection collection=<span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="comment">/*增加元素，remove为删除元素*/</span></span><br><span class="line">    collection.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">    collection.add(<span class="string">&quot;西瓜&quot;</span>);</span><br><span class="line">    System.out.println(collection);</span><br><span class="line">    System.out.println(<span class="string">&quot;元素个数:&quot;</span>+collection.size());</span><br><span class="line">    <span class="comment">/*遍历元素</span></span><br><span class="line"><span class="comment">    * 使用for*/</span></span><br><span class="line">    <span class="keyword">for</span> (Object o : collection) &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用迭代器（迭代器专门用来遍历集合的一种方式）</span></span><br><span class="line">    <span class="comment">//hasnext();判断是否有下一个元素</span></span><br><span class="line">    <span class="comment">//next();获取下一个元素</span></span><br><span class="line">    <span class="comment">//remove();删除当前元素</span></span><br><span class="line">    Iterator iterator = collection.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        Object next = iterator.next();</span><br><span class="line">        System.out.println(next);</span><br><span class="line">     <span class="comment">//删除操作</span></span><br><span class="line">     <span class="comment">//collection.remove(s);引发错误：并发修改异常</span></span><br><span class="line">     <span class="comment">//iterator.remove();应使用迭代器的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(collection.isEmpty());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Son-interface"><a href="#Son-interface" class="headerlink" title="Son interface"></a>Son interface</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul>
<li><p><strong>特点</strong>：有序、有下标、元素可以重复。</p>
</li>
<li><p><strong>方法</strong>：</p>
<ul>
<li><p><code>void add(int index,Object o) //在index位置插入对象o。</code></p>
</li>
<li><p><code>boolean addAll(index,Collection c) //将一个集合中的元素添加到此集合中的index位置。</code></p>
</li>
<li><p><code>Object get(int index) //返回集合中指定位置的元素。</code></p>
</li>
<li><p><code>List subList(int fromIndex,int toIndex) //返回fromIndex和toIndex之间的集合元素。</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;第一个&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;中间&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;最后一个&quot;</span>);</span><br><span class="line">    <span class="comment">//插入操作,index为插入的位置</span></span><br><span class="line">    list.add(<span class="number">1</span>,<span class="string">&quot;插入&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;元素个数：&quot;</span>+list.size());</span><br><span class="line">    System.out.println(list.toString());</span><br><span class="line">    <span class="comment">//使用列表迭代器，listIterator可以双向遍历，添加、删除及修改元素。</span></span><br><span class="line">    ListIterator listIterator=list.listIterator();</span><br><span class="line">    <span class="comment">//从前往后</span></span><br><span class="line">    <span class="keyword">while</span> (listIterator.hasNext())&#123;</span><br><span class="line">        System.out.println(listIterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从后往前（此时“遍历指针”已经指向末尾）</span></span><br><span class="line">    <span class="keyword">while</span> (listIterator.hasPrevious())&#123;</span><br><span class="line">        System.out.println(listIterator.previous());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取位置</span></span><br><span class="line">    System.out.println(list.indexOf(<span class="string">&quot;中间&quot;</span>));</span><br><span class="line">    <span class="comment">//subList，返回子集合，含头不含尾</span></span><br><span class="line">    List list1 = list.subList(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    System.out.println(list1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul>
<li>数组结构实现，查询块、增删慢</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ArrayList arrayList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="comment">//添加元素</span></span><br><span class="line">		Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;s&quot;</span>, <span class="number">21</span>);</span><br><span class="line">		Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;x&quot;</span>, <span class="number">22</span>);</span><br><span class="line">		Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;p&quot;</span>, <span class="number">21</span>);</span><br><span class="line">		arrayList.add(s1);</span><br><span class="line">		arrayList.add(s2);</span><br><span class="line">		arrayList.add(s3);</span><br><span class="line">		System.out.println(<span class="string">&quot;元素个数：&quot;</span>+arrayList.size());</span><br><span class="line">		System.out.println(arrayList.toString());</span><br><span class="line">		<span class="comment">//删除元素</span></span><br><span class="line">		arrayList.remove(s1);</span><br><span class="line">		<span class="comment">//arrayList.remove(new Student(&quot;s&quot;, 21));</span></span><br><span class="line">		<span class="comment">//注：这样可以删除吗（不可以）？显然这是两个不同的对象。</span></span><br><span class="line">		<span class="comment">//假如两个对象属性相同便认为其是同一对象，那么如何修改代码？</span></span><br><span class="line">		<span class="comment">//遍历元素</span></span><br><span class="line">		<span class="comment">//使用迭代器</span></span><br><span class="line">		Iterator iterator=arrayList.iterator();</span><br><span class="line">		<span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">			System.out.println(iterator.next());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//使用列表迭代器</span></span><br><span class="line">		ListIterator listIterator=arrayList.listIterator();</span><br><span class="line">		<span class="comment">//从前往后遍历</span></span><br><span class="line">		<span class="keyword">while</span>(listIterator.hasNext()) &#123;</span><br><span class="line">			System.out.println(listIterator.next());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//从后往前遍历</span></span><br><span class="line">		<span class="keyword">while</span>(listIterator.hasPrevious()) &#123;</span><br><span class="line">			System.out.println(listIterator.previous());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//判断</span></span><br><span class="line">		System.out.println(arrayList.isEmpty());</span><br><span class="line">		<span class="comment">//System.out.println(arrayList.contains(new Student(&quot;x&quot;, 22)));</span></span><br><span class="line">		<span class="comment">//5.查找</span></span><br><span class="line">		System.out.println(arrayList.indexOf(s1));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ArrayList-Source-code"><a href="#ArrayList-Source-code" class="headerlink" title="ArrayList Source code"></a>ArrayList Source code</h3><ul>
<li><p>默认容量大小：<code>private static final int DEFAULT_CAPACITY = 10;</code></p>
</li>
<li><p>存放元素的数组：<code>transient Object[] elementData;</code></p>
</li>
<li><p>实际元素个数：<code>private int size;</code></p>
</li>
<li><p>创建对象时调用的无参构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一个空的数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段源码说明当你没有向集合中添加任何元素时，集合容量为0。那么默认的10个容量怎么来的呢？查看add()源码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设你new了一个数组，当前容量为0，size当然也为0。这时调用add方法进入到<code>ensureCapacityInternal(size + 1);</code>该方法源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法中的参数minCapacity传入的值为size+1也就是 1，接着我们再进入到<code>calculateCapacity(elementData, minCapacity)</code>里面：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上文说过，elementData就是存放元素的数组，当前容量为0，if条件成立，返回默认容量<code>DEFAULT_CAPACITY</code>也就是10。这个值作为参数又传入<code>ensureExplicitCapacity()</code>方法中，进入该方法查看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为elementData数组长度为0，所以if条件成立，调用grow方法，<strong>重要的部分来了</strong>，我们再次进入到grow方法的源码中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法先声明了一个oldCapacity变量将数组长度赋给它，其值为0；又声明了一个newCapacity变量其值为<code>oldCapacity+一个增量</code>，可以发现这个增量是和原数组长度有关的量，当然在这里也为0。第一个if条件满足，newCapacity的值为10（这就是默认的容量，不理解的话再看看前面）。第二个if条件不成立，也可以不用注意，因为MAX_ARRAY_SIZE的定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br></pre></td></tr></table></figure>

<p>这个值太大了以至于第二个if条件没有了解的必要。</p>
<p>最后一句话就是为elementData数组赋予了新的长度，<code>Arrays.copyOf()</code>方法返回的数组是新的数组对象，原数组对象不会改变，该拷贝不会影响原来的数组。<code>copyOf()</code>的第二个自变量指定要建立的新数组长度，如果新数组的长度超过原数组的长度，则保留数组默认值。</p>
<p>这时候再回到add的方法中，接着就向下执行<code>elementData[size++] = e;</code>到这里为止关于ArrayList就讲解得差不多了，当数组长度为10的时候你们可以试着过一下源码，查一下每次的增量是多少（答案是每次扩容为原来的1.5倍）。</p>
<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a><strong>Vector</strong></h3><ul>
<li><p>数组结构实现，查询快、增删慢；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Vector vector=<span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">		<span class="comment">//1.添加数据</span></span><br><span class="line">		vector.add(<span class="string">&quot;tang&quot;</span>);</span><br><span class="line">		vector.add(<span class="string">&quot;he&quot;</span>);</span><br><span class="line">		vector.add(<span class="string">&quot;yu&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;元素个数：&quot;</span>+vector.size());</span><br><span class="line">		<span class="comment">//2.删除数据</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * vector.remove(0); vector.remove(&quot;tang&quot;);</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//3.遍历</span></span><br><span class="line">		<span class="comment">//使用枚举器</span></span><br><span class="line">		Enumeration enumeration=vector.elements();</span><br><span class="line">		<span class="keyword">while</span> (enumeration.hasMoreElements()) &#123;</span><br><span class="line">			String s = (String) enumeration.nextElement();</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//4.判断</span></span><br><span class="line">		System.out.println(vector.isEmpty());</span><br><span class="line">		System.out.println(vector.contains(<span class="string">&quot;he&quot;</span>));</span><br><span class="line">		<span class="comment">//5. Vector其他方法</span></span><br><span class="line">		<span class="comment">//firstElement()  lastElement()  ElementAt();</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><strong>LinkedList</strong></h3><ul>
<li><p>链表结构实现，增删快，查询慢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		LinkedList linkedList=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">		Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;唐&quot;</span>, <span class="number">21</span>);</span><br><span class="line">		Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;何&quot;</span>, <span class="number">22</span>);</span><br><span class="line">		Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;余&quot;</span>, <span class="number">21</span>);</span><br><span class="line">		<span class="comment">//1.添加元素</span></span><br><span class="line">		linkedList.add(s1);</span><br><span class="line">		linkedList.add(s2);</span><br><span class="line">		linkedList.add(s3);</span><br><span class="line">		linkedList.add(s3);</span><br><span class="line">		System.out.println(<span class="string">&quot;元素个数：&quot;</span>+linkedList.size());</span><br><span class="line">		System.out.println(linkedList.toString());</span><br><span class="line">		<span class="comment">//2.删除元素</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * linkedList.remove(new Student(&quot;唐&quot;, 21));</span></span><br><span class="line"><span class="comment">		 * System.out.println(linkedList.toString());</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//3.遍历</span></span><br><span class="line">		<span class="comment">//3.1 使用for</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;linkedList.size();++i) &#123;</span><br><span class="line">			System.out.println(linkedList.get(i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//3.2 使用增强for</span></span><br><span class="line">		<span class="keyword">for</span>(Object object:linkedList) &#123;</span><br><span class="line">			Student student=(Student) object;</span><br><span class="line">			System.out.println(student.toString());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//3.3 使用迭代器</span></span><br><span class="line">		Iterator iterator =linkedList.iterator();</span><br><span class="line">		<span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">			Student student = (Student) iterator.next();</span><br><span class="line">			System.out.println(student.toString());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//3.4 使用列表迭代器（略）</span></span><br><span class="line">		<span class="comment">//4. 判断</span></span><br><span class="line">		System.out.println(linkedList.contains(s1));</span><br><span class="line">		System.out.println(linkedList.isEmpty());</span><br><span class="line">		System.out.println(linkedList.indexOf(s3));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="LinkedList-Source-code"><a href="#LinkedList-Source-code" class="headerlink" title="LinkedList  Source code"></a><strong>LinkedList</strong>  Source code</h3><p>LinkedList首先有三个属性：</p>
<ul>
<li>链表大小：<code>transient int size = 0;</code></li>
<li>（指向）第一个结点/头结点：<code> transient Node&lt;E&gt; first;</code></li>
<li>（指向）最后一个结点/尾结点：<code>transient Node&lt;E&gt; last;</code></li>
</ul>
<p>关于Node类型我们再进入到类里看看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先item存放的是实际数据；next指向下一个结点而prev指向上一个结点。</p>
<p>Node带参构造方法的三个参数分别是前一个结点、存储的数据、后一个结点，调用这个构造方法时将它们赋值给当前对象。</p>
<p>LinkedList是如何添加元素的呢？先看看add方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入到linkLast方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设刚开始new了一个LinkedList对象，first和last属性都为空，调用add进入到linkLast方法。</p>
<p>首先创建一个Node变量 l 将last（此时为空）赋给它，然后new一个newNode变量存储数据，并且它的前驱指向l，后继指向null；再把last指向newNode。如下图所示：</p>
<p><img src="https://pic.downk.cc/item/5f9a62a01cd1bbb86bc58487.png"></p>
<p>如果满足if条件，说明这是添加的第一个结点，将first指向newNode：</p>
<p><img src="https://pic.downk.cc/item/5f9a631c1cd1bbb86bc59ca6.png"></p>
<p>至此，LinkedList对象的第一个数据添加完毕。假设需要再添加一个数据，我们可以再来走一遍，过程同上不再赘述，图示如下：</p>
<p><img src="https://pic.downk.cc/item/5f9a680e1cd1bbb86bc681f6.png"></p>
<h3 id="ArrayList和LinkedList区别"><a href="#ArrayList和LinkedList区别" class="headerlink" title="ArrayList和LinkedList区别"></a><strong>ArrayList和LinkedList区别</strong></h3><ul>
<li>ArrayList：必须开辟连续空间，查询快，增删慢。</li>
<li>LinkedList：无需开辟连续空间，查询慢，增删快。</li>
</ul>
<p><img src="https://pic.downk.cc/item/5f9a6b371cd1bbb86bc74cda.png"></p>
<h2 id="Visual-Basic"><a href="#Visual-Basic" class="headerlink" title="Visual Basic"></a>Visual Basic</h2><ul>
<li>Java泛型是JDK1.5中引入的一个新特性，其本质是参数化类型，把类型作为参数传递。</li>
<li>常见形式有泛型类、泛型接口、泛型方法。</li>
<li>语法：<ul>
<li>&lt;T,…&gt; T称为类型占位符，表示一种引用类型。</li>
</ul>
</li>
<li>好处：<ul>
<li>提高代码的重用性。</li>
<li>防止类型转换异常，提高代码的安全性。</li>
</ul>
</li>
</ul>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a><strong>Class</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型类</span></span><br><span class="line"><span class="comment"> * 语法：类名&lt;T&gt;</span></span><br><span class="line"><span class="comment"> * T是类型占位符，表示一种引用类型，编写多个使用逗号隔开</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myGeneric</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">	<span class="comment">//1.创建泛型变量</span></span><br><span class="line">	<span class="comment">//不能使用new来创建，因为泛型是不确定的类型，也可能拥有私密的构造方法。</span></span><br><span class="line">	T t;</span><br><span class="line">	<span class="comment">//2.泛型作为方法的参数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">		System.out.println(t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//泛型作为方法的返回值</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意：</span></span><br><span class="line"><span class="comment"> * 1.泛型只能使用引用类型</span></span><br><span class="line"><span class="comment"> * 2.不同泛型类型的对象不能相互赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testGeneric</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//使用泛型类创建对象</span></span><br><span class="line">		myGeneric&lt;String&gt; myGeneric1=<span class="keyword">new</span> myGeneric&lt;String&gt;();</span><br><span class="line">		myGeneric1.t=<span class="string">&quot;tang&quot;</span>;</span><br><span class="line">		myGeneric1.show(<span class="string">&quot;he&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		myGeneric&lt;Integer&gt; myGeneric2=<span class="keyword">new</span> myGeneric&lt;Integer&gt;();</span><br><span class="line">		myGeneric2.t=<span class="number">10</span>;</span><br><span class="line">		myGeneric2.show(<span class="number">20</span>);</span><br><span class="line">		Integer integer=myGeneric2.getT();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型接口</span></span><br><span class="line"><span class="comment"> * 语法：接口名&lt;T&gt;</span></span><br><span class="line"><span class="comment"> * 注意：不能创建泛型静态常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//创建常量</span></span><br><span class="line">	String nameString=<span class="string">&quot;tang&quot;</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="function">T <span class="title">server</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现接口时确定泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">server</span><span class="params">(String t)</span> </span>&#123;</span><br><span class="line">		System.out.println(t);</span><br><span class="line">		<span class="keyword">return</span> t; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">MyInterfaceImpl myInterfaceImpl=<span class="keyword">new</span> MyInterfaceImpl();</span><br><span class="line">myInterfaceImpl.server(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="comment">//xxx</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现接口时不确定泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl2</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">server</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">		System.out.println(t);</span><br><span class="line">		<span class="keyword">return</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">MyInterfaceImpl2&lt;Integer&gt; myInterfaceImpl2=<span class="keyword">new</span> MyInterfaceImpl2&lt;Integer&gt;();</span><br><span class="line">myInterfaceImpl2.server(<span class="number">2000</span>);</span><br><span class="line"><span class="comment">//2000</span></span><br></pre></td></tr></table></figure>

<h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型方法</span></span><br><span class="line"><span class="comment"> * 语法：&lt;T&gt; 返回类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericMethod</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;泛型方法&quot;</span>+t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line">MyGenericMethod myGenericMethod=<span class="keyword">new</span> MyGenericMethod();</span><br><span class="line">myGenericMethod.show(<span class="string">&quot;tang&quot;</span>);</span><br><span class="line">myGenericMethod.show(<span class="number">200</span>);</span><br><span class="line">myGenericMethod.show(<span class="number">3.14</span>);</span><br></pre></td></tr></table></figure>

<h3 id="泛型集合"><a href="#泛型集合" class="headerlink" title="泛型集合"></a><strong>泛型集合</strong></h3><ul>
<li><strong>概念</strong>：参数化类型、类型安全的集合，强制集合元素的类型必须一致。</li>
<li><strong>特点:</strong><ul>
<li>编译时即可检查，而非运行时抛出异常。</li>
<li>访问时，不必类型转换（拆箱）。</li>
<li>不同泛型指尖引用不能相互赋值，泛型不存在多态。</li>
</ul>
</li>
</ul>
<p>之前我们在创建LinkedList类型对象的时候并没有使用泛型，但是进到它的源码中会发现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;<span class="comment">//略&#125;</span></span><br></pre></td></tr></table></figure>

<p>它是一个泛型类，而我之前使用的时候并没有传递，说明java语法是允许的，这个时候传递的类型是Object类，虽然它是所有类的父类，可以存储任意的类型，但是在遍历、获取元素时需要原来的类型就要进行强制转换。这个时候就会出现一些问题，假如往链表里存储了许多不同类型的数据，在强转的时候就要判断每一个原来的类型，这样就很容易出现错误。</p>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="Set-Son-Interface"><a href="#Set-Son-Interface" class="headerlink" title="Set Son Interface"></a><strong>Set Son Interface</strong></h3><ul>
<li><strong>特点</strong>：无序、无下标、元素不可重复。</li>
<li><strong>方法</strong>：全部继承自Collection中的方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Set接口的使用</span></span><br><span class="line"><span class="comment"> * 特点：1.无序，没有下标；2.重复</span></span><br><span class="line"><span class="comment"> * 1.添加数据</span></span><br><span class="line"><span class="comment"> * 2.删除数据</span></span><br><span class="line"><span class="comment"> * 3.遍历【重点】</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Set&lt;String&gt; set=<span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">		<span class="comment">//1.添加数据</span></span><br><span class="line">		set.add(<span class="string">&quot;tang&quot;</span>);</span><br><span class="line">		set.add(<span class="string">&quot;he&quot;</span>);</span><br><span class="line">		set.add(<span class="string">&quot;yu&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;数据个数：&quot;</span>+set.size());</span><br><span class="line">		System.out.println(set.toString());<span class="comment">//无序输出</span></span><br><span class="line">		<span class="comment">//2.删除数据</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * set.remove(&quot;tang&quot;); System.out.println(set.toString());</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">//3.遍历【重点】</span></span><br><span class="line">		<span class="comment">//3.1 使用增强for</span></span><br><span class="line">		<span class="keyword">for</span> (String string : set) &#123;</span><br><span class="line">			System.out.println(string);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//3.2 使用迭代器</span></span><br><span class="line">		Iterator&lt;String&gt; iterator=set.iterator();</span><br><span class="line">		<span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">			System.out.println(iterator.next());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//4.判断</span></span><br><span class="line">		System.out.println(set.contains(<span class="string">&quot;tang&quot;</span>));</span><br><span class="line">		System.out.println(set.isEmpty());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul>
<li><p>基于HashCode计算元素存放位置。</p>
</li>
<li><p>当存入元素的哈希码相同时，会调用equals进行确认，如结果为true，则拒绝后者存入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 人类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Peerson [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HashSet集合的使用</span></span><br><span class="line"><span class="comment"> * 存储结构：哈希表（数组+链表+红黑树）</span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.遍历</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		HashSet&lt;Person&gt; hashSet=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">		Person p1=<span class="keyword">new</span> Person(<span class="string">&quot;tang&quot;</span>,<span class="number">21</span>);</span><br><span class="line">		Person p2=<span class="keyword">new</span> Person(<span class="string">&quot;he&quot;</span>, <span class="number">22</span>);</span><br><span class="line">		Person p3=<span class="keyword">new</span> Person(<span class="string">&quot;yu&quot;</span>, <span class="number">21</span>);</span><br><span class="line">		<span class="comment">//1.添加元素</span></span><br><span class="line">		hashSet.add(p1);</span><br><span class="line">		hashSet.add(p2);</span><br><span class="line">		hashSet.add(p3);</span><br><span class="line">        <span class="comment">//重复，添加失败</span></span><br><span class="line">        hashSet.add(p3);</span><br><span class="line">        <span class="comment">//直接new一个相同属性的对象，依然会被添加，不难理解。</span></span><br><span class="line">        <span class="comment">//假如相同属性便认为是同一个对象，怎么修改？</span></span><br><span class="line">        hashSet.add(<span class="keyword">new</span> Person(<span class="string">&quot;yu&quot;</span>, <span class="number">21</span>));</span><br><span class="line">		System.out.println(hashSet.toString());</span><br><span class="line">		<span class="comment">//2.删除元素</span></span><br><span class="line">		hashSet.remove(p2);</span><br><span class="line">		<span class="comment">//3.遍历</span></span><br><span class="line">		<span class="comment">//3.1 增强for</span></span><br><span class="line">		<span class="keyword">for</span> (Person person : hashSet) &#123;</span><br><span class="line">			System.out.println(person);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//3.2 迭代器</span></span><br><span class="line">		Iterator&lt;Person&gt; iterator=hashSet.iterator();</span><br><span class="line">		<span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">			System.out.println(iterator.next());		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//4.判断</span></span><br><span class="line">		System.out.println(hashSet.isEmpty());</span><br><span class="line">        <span class="comment">//直接new一个相同属性的对象结果输出是false，不难理解。</span></span><br><span class="line">        <span class="comment">//注：假如相同属性便认为是同一个对象，该怎么做？</span></span><br><span class="line">		System.out.println(hashSet.contains(<span class="keyword">new</span> Person(<span class="string">&quot;tang&quot;</span>, <span class="number">21</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：hashSet存储过程：</p>
<ol>
<li>根据hashCode计算保存的位置，如果位置为空，则直接保存，否则执行第二步。</li>
<li>执行equals方法，如果方法返回true，则认为是重复，拒绝存储，否则形成链表。</li>
</ol>
<p>存储过程实际上就是重复依据，要实现“注”里的问题，可以重写hashCode和equals代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    result = prime * result + age;</span><br><span class="line">    result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Person other = (Person) obj;</span><br><span class="line">    <span class="keyword">if</span> (age != other.age)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hashCode方法里为什么要使用31这个数字大概有两个原因：</p>
<ol>
<li>31是一个质数，这样的数字在计算时可以尽量减少散列冲突。</li>
<li>可以提高执行效率，因为31*i=(i&lt;&lt;5)-i，31乘以一个数可以转换成移位操作，这样能快一点；但是也有人对这两点提出质疑。</li>
</ol>
<h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a><strong>TreeSet</strong></h3><ul>
<li>基于排序顺序实现不重复。</li>
<li>实现了SortedSet接口，对集合元素自动排序。</li>
<li>元素对象的类型必须实现Comparable接口，指定排序规则。</li>
<li>通过CompareTo方法确定是否为重复元素。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用TreeSet保存数据</span></span><br><span class="line"><span class="comment"> * 存储结构：红黑树</span></span><br><span class="line"><span class="comment"> * 要求：元素类必须实现Comparable接口，compareTo方法返回0，认为是重复元素 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TreeSet&lt;Person&gt; persons=<span class="keyword">new</span> TreeSet&lt;Person&gt;();</span><br><span class="line">		Person p1=<span class="keyword">new</span> Person(<span class="string">&quot;tang&quot;</span>,<span class="number">21</span>);</span><br><span class="line">		Person p2=<span class="keyword">new</span> Person(<span class="string">&quot;he&quot;</span>, <span class="number">22</span>);</span><br><span class="line">		Person p3=<span class="keyword">new</span> Person(<span class="string">&quot;yu&quot;</span>, <span class="number">21</span>);</span><br><span class="line">		<span class="comment">//1.添加元素</span></span><br><span class="line">		persons.add(p1);</span><br><span class="line">		persons.add(p2);</span><br><span class="line">		persons.add(p3);</span><br><span class="line">		<span class="comment">//注：直接添加会报类型转换错误，需要实现Comparable接口</span></span><br><span class="line">		System.out.println(persons.toString());</span><br><span class="line">		<span class="comment">//2.删除元素</span></span><br><span class="line">		persons.remove(p1);</span><br><span class="line">		persons.remove(<span class="keyword">new</span> Person(<span class="string">&quot;he&quot;</span>, <span class="number">22</span>));</span><br><span class="line">		System.out.println(persons.toString());</span><br><span class="line">		<span class="comment">//3.遍历（略）</span></span><br><span class="line">		<span class="comment">//4.判断</span></span><br><span class="line">		System.out.println(persons.contains(<span class="keyword">new</span> Person(<span class="string">&quot;yu&quot;</span>, <span class="number">21</span>)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看Comparable接口的源码，发现只有一个compareTo抽象方法，在人类中实现它：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="comment">//1.先按姓名比</span></span><br><span class="line">	<span class="comment">//2.再按年龄比</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n1=<span class="keyword">this</span>.getName().compareTo(o.getName());</span><br><span class="line">		<span class="keyword">int</span> n2=<span class="keyword">this</span>.age-o.getAge();</span><br><span class="line">		<span class="keyword">return</span> n1==<span class="number">0</span>?n2:n1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了实现Comparable接口里的比较方法，TreeSet也提供了一个带比较器Comparator的构造方法，使用匿名内部类来实现它：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TreeSet的使用</span></span><br><span class="line"><span class="comment"> * Comparator：实现定制比较（比较器）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TreeSet&lt;Person&gt; persons=<span class="keyword">new</span> TreeSet&lt;Person&gt;(<span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">				<span class="comment">// 先按年龄比较</span></span><br><span class="line">				<span class="comment">// 再按姓名比较</span></span><br><span class="line">				<span class="keyword">int</span> n1=o1.getAge()-o2.getAge();</span><br><span class="line">				<span class="keyword">int</span> n2=o1.getName().compareTo(o2.getName());</span><br><span class="line">				<span class="keyword">return</span> n1==<span class="number">0</span>?n2:n1;</span><br><span class="line">			&#125;			</span><br><span class="line">		&#125;);</span><br><span class="line">		Person p1=<span class="keyword">new</span> Person(<span class="string">&quot;tang&quot;</span>,<span class="number">21</span>);</span><br><span class="line">		Person p2=<span class="keyword">new</span> Person(<span class="string">&quot;he&quot;</span>, <span class="number">22</span>);</span><br><span class="line">		Person p3=<span class="keyword">new</span> Person(<span class="string">&quot;yu&quot;</span>, <span class="number">21</span>);</span><br><span class="line">		persons.add(p1);</span><br><span class="line">		persons.add(p2);</span><br><span class="line">		persons.add(p3);</span><br><span class="line">		System.out.println(persons.toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要求：使用TreeSet集合实现字符串按照长度进行排序</span></span><br><span class="line"><span class="comment"> * helloworld tangrui hechengyang wangzixu yuguoming</span></span><br><span class="line"><span class="comment"> * Comparator接口实现定制比较</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TreeSet&lt;String&gt; treeSet=<span class="keyword">new</span> TreeSet&lt;String&gt;(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="comment">//先比较字符串长度</span></span><br><span class="line">			<span class="comment">//再比较字符串</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">int</span> n1=o1.length()-o2.length();</span><br><span class="line">				<span class="keyword">int</span> n2=o1.compareTo(o2);</span><br><span class="line">				<span class="keyword">return</span> n1==<span class="number">0</span>?n2:n1;</span><br><span class="line">			&#125;			</span><br><span class="line">		&#125;);</span><br><span class="line">		treeSet.add(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">		treeSet.add(<span class="string">&quot;tangrui&quot;</span>);</span><br><span class="line">		treeSet.add(<span class="string">&quot;hechenyang&quot;</span>);</span><br><span class="line">		treeSet.add(<span class="string">&quot;yuguoming&quot;</span>);</span><br><span class="line">		treeSet.add(<span class="string">&quot;wangzixu&quot;</span>);</span><br><span class="line">		System.out.println(treeSet.toString());</span><br><span class="line">        <span class="comment">//输出[tangrui, wangzixu, yuguoming, hechenyang, helloworld]</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Map接口的特点：</p>
<ol>
<li>用于存储任意键值对(Key-Value)。</li>
<li>键：无序、无下标、不允许重复（唯一）。</li>
<li>值：无序、无下标、允许重复</li>
</ol>
<p><img src="https://pic.downk.cc/item/5f9bbd991cd1bbb86b208d82.png"></p>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a><strong>Map</strong></h2><ul>
<li><strong>特点</strong>：存储一对数据（Key-Value），无序、无下标，键不可重复。</li>
<li><strong>方法</strong>：<ul>
<li><code>V put(K key,V value)</code>//将对象存入到集合中，关联键值。key重复则覆盖原值。</li>
</ul>
</li>
<li><code>Object get(Object key)</code>//根据键获取相应的值。<ul>
<li><code>Set&lt;K&gt;</code>//返回所有的key</li>
<li><code>Collection&lt;V&gt; values()</code>//返回包含所有值的Collection集合。</li>
<li><code>Set&lt;Map.Entry&lt;K,V&gt;&gt;</code>//键值匹配的set集合</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Map接口的使用</span></span><br><span class="line"><span class="comment"> * 特点：1.存储键值对 2.键不能重复，值可以重复 3.无序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Map&lt;String,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">		<span class="comment">//1.添加元素</span></span><br><span class="line">		map.put(<span class="string">&quot;tang&quot;</span>, <span class="number">21</span>);</span><br><span class="line">		map.put(<span class="string">&quot;he&quot;</span>, <span class="number">22</span>);</span><br><span class="line">		map.put(<span class="string">&quot;fan&quot;</span>, <span class="number">23</span>);</span><br><span class="line">		System.out.println(map.toString());</span><br><span class="line">		<span class="comment">//2.删除元素</span></span><br><span class="line">		map.remove(<span class="string">&quot;he&quot;</span>);</span><br><span class="line">		System.out.println(map.toString());</span><br><span class="line">		<span class="comment">//3.遍历</span></span><br><span class="line">		<span class="comment">//3.1 使用keySet();</span></span><br><span class="line">		<span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">			System.out.println(key+<span class="string">&quot; &quot;</span>+map.get(key));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//3.2 使用entrySet();效率较高</span></span><br><span class="line">		<span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">			System.out.println(entry.getKey()+<span class="string">&quot; &quot;</span>+entry.getValue());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a><strong>HashMap</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 学生类</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  	<span class="keyword">private</span> String name;</span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">int</span> id;	</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">  		<span class="keyword">super</span>();</span><br><span class="line">  		<span class="keyword">this</span>.name = name;</span><br><span class="line">  		<span class="keyword">this</span>.id = id;</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  		<span class="keyword">return</span> name;</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">  		<span class="keyword">this</span>.name = name;</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  		<span class="keyword">return</span> id;</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">  		<span class="keyword">this</span>.id = id;</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="meta">@Override</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  		<span class="keyword">return</span> <span class="string">&quot;Student [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + id + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * HashMap的使用</span></span><br><span class="line"><span class="comment">   * 存储结构：哈希表（数组+链表+红黑树）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  		HashMap&lt;Student, String&gt; hashMap=<span class="keyword">new</span> HashMap&lt;Student, String&gt;();</span><br><span class="line">  		Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;tang&quot;</span>, <span class="number">36</span>);</span><br><span class="line">  		Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;yu&quot;</span>, <span class="number">101</span>);</span><br><span class="line">  		Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;he&quot;</span>, <span class="number">10</span>);</span><br><span class="line">  		<span class="comment">//1.添加元素</span></span><br><span class="line">  		hashMap.put(s1, <span class="string">&quot;成都&quot;</span>);</span><br><span class="line">  		hashMap.put(s2, <span class="string">&quot;杭州&quot;</span>);</span><br><span class="line">  		hashMap.put(s3, <span class="string">&quot;郑州&quot;</span>);</span><br><span class="line">  		<span class="comment">//添加失败，但会更新值</span></span><br><span class="line">  		hashMap.put(s3,<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">  		<span class="comment">//添加成功，不过两个属性一模一样；</span></span><br><span class="line">  		<span class="comment">//注：假如相同属性便认为是同一个对象，怎么修改？</span></span><br><span class="line">  		hashMap.put(<span class="keyword">new</span> Student(<span class="string">&quot;he&quot;</span>, <span class="number">10</span>),<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">  		System.out.println(hashMap.toString());</span><br><span class="line">  		<span class="comment">//2.删除元素</span></span><br><span class="line">  		hashMap.remove(s3);</span><br><span class="line">  		System.out.println(hashMap.toString());</span><br><span class="line">  		<span class="comment">//3.遍历</span></span><br><span class="line">  		<span class="comment">//3.1 使用keySet()遍历</span></span><br><span class="line">  		<span class="keyword">for</span> (Student key : hashMap.keySet()) &#123;</span><br><span class="line">  			System.out.println(key+<span class="string">&quot; &quot;</span>+hashMap.get(key));</span><br><span class="line">  		&#125;</span><br><span class="line">  		<span class="comment">//3.2 使用entrySet()遍历</span></span><br><span class="line">  		<span class="keyword">for</span> (Entry&lt;Student, String&gt; entry : hashMap.entrySet()) &#123;</span><br><span class="line">  			System.out.println(entry.getKey()+<span class="string">&quot; &quot;</span>+entry.getValue());</span><br><span class="line">  		&#125;</span><br><span class="line">  		<span class="comment">//4.判断</span></span><br><span class="line">  		<span class="comment">//注：同上</span></span><br><span class="line">  		System.out.println(hashMap.containsKey(<span class="keyword">new</span> Student(<span class="string">&quot;he&quot;</span>, <span class="number">10</span>)));</span><br><span class="line">  		System.out.println(hashMap.containsValue(<span class="string">&quot;成都&quot;</span>));</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>注：和之前说过的HashSet类似，重复依据是hashCode和equals方法，重写即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</span><br><span class="line">      <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">      result = prime * result + id;</span><br><span class="line">      result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      Student other = (Student) obj;</span><br><span class="line">      <span class="keyword">if</span> (id != other.id)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a><strong>TreeMap</strong></h3><ul>
<li>实现了SortedMap接口（是Map的子接口），可以对key自动排序。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TreeMap的使用</span></span><br><span class="line"><span class="comment"> * 存储结构：红黑树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TreeMap&lt;Student, Integer&gt; treeMap=<span class="keyword">new</span> TreeMap&lt;Student, Integer&gt;();</span><br><span class="line">		Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;tang&quot;</span>, <span class="number">36</span>);</span><br><span class="line">		Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;yu&quot;</span>, <span class="number">101</span>);</span><br><span class="line">		Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;he&quot;</span>, <span class="number">10</span>);</span><br><span class="line">		<span class="comment">//1.添加元素</span></span><br><span class="line">		treeMap.put(s1, <span class="number">21</span>);</span><br><span class="line">		treeMap.put(s2, <span class="number">22</span>);</span><br><span class="line">		treeMap.put(s3, <span class="number">21</span>);</span><br><span class="line">		<span class="comment">//不能直接打印，需要实现Comparable接口，因为红黑树需要比较大小</span></span><br><span class="line">		System.out.println(treeMap.toString());</span><br><span class="line">		<span class="comment">//2.删除元素</span></span><br><span class="line">		treeMap.remove(<span class="keyword">new</span> Student(<span class="string">&quot;he&quot;</span>, <span class="number">10</span>));</span><br><span class="line">		System.out.println(treeMap.toString());</span><br><span class="line">		<span class="comment">//3.遍历</span></span><br><span class="line">		<span class="comment">//3.1 使用keySet()</span></span><br><span class="line">		<span class="keyword">for</span> (Student key : treeMap.keySet()) &#123;</span><br><span class="line">			System.out.println(key+<span class="string">&quot; &quot;</span>+treeMap.get(key));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//3.2 使用entrySet()</span></span><br><span class="line">		<span class="keyword">for</span> (Entry&lt;Student, Integer&gt; entry : treeMap.entrySet()) &#123;</span><br><span class="line">			System.out.println(entry.getKey()+<span class="string">&quot; &quot;</span>+entry.getValue());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//4.判断</span></span><br><span class="line">		System.out.println(treeMap.containsKey(s1));</span><br><span class="line">		System.out.println(treeMap.isEmpty());		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在学生类中实现Comparable接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n1=<span class="keyword">this</span>.id-o.id;</span><br><span class="line">        <span class="keyword">return</span> n1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除此之外还可以使用比较器来定制比较：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeMap&lt;Student, Integer&gt; treeMap2=<span class="keyword">new</span> TreeMap&lt;Student, Integer&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;			</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Collections-Tool-Class"><a href="#Collections-Tool-Class" class="headerlink" title="Collections Tool Class"></a><strong>Collections Tool Class</strong></h2><ul>
<li><p><strong>概念</strong>：集合工具类，定义了除了存取以外的集合常用方法。</p>
</li>
<li><p><strong>方法</strong>：</p>
<ul>
<li><p><code>public static void reverse(List&lt;?&gt; list)</code>//反转集合中元素的顺序</p>
</li>
<li><p><code>public static void shuffle(List&lt;?&gt; list)</code>//随机重置集合元素的顺序</p>
</li>
<li><p><code>public static void sort(List&lt;T&gt; list)</code>//升序排序（元素类型必须实现Comparable接口）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示Collections工具类的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		list.add(<span class="number">20</span>);</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line">		list.add(<span class="number">30</span>);</span><br><span class="line">		list.add(<span class="number">90</span>);</span><br><span class="line">		list.add(<span class="number">70</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//sort排序</span></span><br><span class="line">		System.out.println(list.toString());</span><br><span class="line">		Collections.sort(list);</span><br><span class="line">		System.out.println(list.toString());</span><br><span class="line">		System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//binarySearch二分查找</span></span><br><span class="line">		<span class="keyword">int</span> i=Collections.binarySearch(list, <span class="number">10</span>);</span><br><span class="line">		System.out.println(i);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//copy复制</span></span><br><span class="line">		List&lt;Integer&gt; list2=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i1=<span class="number">0</span>;i1&lt;<span class="number">5</span>;++i1) &#123;</span><br><span class="line">			list2.add(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//该方法要求目标元素容量大于等于源目标</span></span><br><span class="line">		Collections.copy(list2, list);</span><br><span class="line">		System.out.println(list2.toString());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//reserve反转</span></span><br><span class="line">		Collections.reverse(list2);</span><br><span class="line">		System.out.println(list2.toString());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//shuffle 打乱</span></span><br><span class="line">		Collections.shuffle(list2);</span><br><span class="line">		System.out.println(list2.toString());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//补充：list转成数组</span></span><br><span class="line">		Integer[] arr=list.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]);</span><br><span class="line">		System.out.println(arr.length);</span><br><span class="line">		<span class="comment">//补充：数组转成集合 </span></span><br><span class="line">		String[] nameStrings= &#123;<span class="string">&quot;tang&quot;</span>,<span class="string">&quot;he&quot;</span>,<span class="string">&quot;yu&quot;</span>&#125;;</span><br><span class="line">		<span class="comment">//受限集合，不能添加和删除</span></span><br><span class="line">		List&lt;String&gt; list3=Arrays.asList(nameStrings);</span><br><span class="line">		System.out.println(list3);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//注：基本类型转成集合时需要修改为包装类</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>知识</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/2022/01/14/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>通过Nodejs安装hexo，Git来搭建环境。</p>
<span id="more"></span>


    <div id="aplayer-ftcteepc" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1842992032" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555" data-volume="0.1"
    ></div>

<h2 id="软件环境安装"><a href="#软件环境安装" class="headerlink" title="软件环境安装"></a>软件环境安装</h2><p>安装nodejs：<code>node -v npm -v</code><br>安装git:<code>git --version</code><br>安装hexo:<code>npm install hexo-cli -g</code><br>hexo指令:使用<code>npx hexo -v</code></p>
<h2 id="GitHub仓库创建"><a href="#GitHub仓库创建" class="headerlink" title="GitHub仓库创建"></a>GitHub仓库创建</h2><p>新建仓库：{网站域名}.github.io<br>#linux shift+insert为粘贴快捷键<br>①生成ssh:<code>ssh-keygen -t rsa -C &quot;GitHub邮箱地址&quot;</code><br>②去C:\Users{用户名}.ssh下找到id_rsa.pub文件复制里面的内容<br>③去GitHub的setting找到SSH and GPG keys点击新建ssh keys复制ssh<br>④测试ssh是否绑定成功:<code>ssh -T git@github.com</code></p>
<h2 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h2><p>新建域名</p>
<p><strong>输入指令</strong><br><code>hexo init (文件夹名)</code>   <strong>如果报错，指令加上前缀npx</strong></p>
<p>①找到喜欢的主题点击Clone or download后将链接复制下来<br>②找到Hexo文件的位置，进入themes文件夹内，在themes文件夹下右键选择Git Bash Here<br>③输入命令,git clone +你复制的链接<br>④返回到上一层，找到_config.yml这个文件，用你的编辑器打开它，找到theme属性，改为生成的主题<br>⑤输入指令<br><code>1.hexo init (文件夹名)</code><br><code>2.hexo g(生成静态页面)</code><br><code>3.hexo s(开启本地服务器)</code><br><code>4.hexo d(上传)</code></p>
<p>问题1:hexo部署到GitHub上但访问网站内容没更新<br>解决方法:hexo clean(清理缓存) hexo d -g(上传)</p>
<h2 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h2><h4 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h4><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">推荐指数</th>
<th align="left">优点</th>
<th align="left">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://valine.js.org/">Valine</a></td>
<td align="left">4</td>
<td align="left">每天30000条评论，10GB的储存</td>
<td align="left">作者评论无标识</td>
</tr>
<tr>
<td align="left"><a href="https://livere.com/">来必力/livere</a></td>
<td align="left">4</td>
<td align="left">多种账号登录</td>
<td align="left">评论无法导出</td>
</tr>
<tr>
<td align="left"><a href="http://changyan.kuaizhan.com/">畅言</a></td>
<td align="left">3</td>
<td align="left">美观</td>
<td align="left">必须备案域名</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/imsun/gitment">gitment</a></td>
<td align="left">3</td>
<td align="left">简洁</td>
<td align="left">只能登陆github评论</td>
</tr>
<tr>
<td align="left">Disqus</td>
<td align="left">1</td>
<td align="left"></td>
<td align="left">需要翻*墙</td>
</tr>
</tbody></table>
<h3 id="获取APP-ID-和-APP-Key"><a href="#获取APP-ID-和-APP-Key" class="headerlink" title="获取APP ID 和 APP Key"></a>获取APP ID 和 APP Key</h3><p>进入<a href="https://valine.js.org/">Valine</a>官网，请先<a href="https://leancloud.cn/dashboard/login.html#/signin">登录</a>或<a href="https://leancloud.cn/dashboard/login.html#/signup">注册</a> <code>LeanCloud</code>, 进入<a href="https://leancloud.cn/dashboard/applist.html#/apps">控制台</a>后点击左下角<a href="https://leancloud.cn/dashboard/applist.html#/newapp">创建应用</a></p>
<p><img src="https://i.loli.net/2019/06/21/5d0c995c86fac81746.jpg"></p>
<p>应用创建好以后，进入刚刚创建的应用，选择左下角的<code>设置</code>&gt;<code>应用Key</code>，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了：</p>
<p><img src="https://i.loli.net/2019/06/21/5d0c997a60baa24436.jpg"></p>
<p>在config.yml文件中找到leancloud填写得到的app_id与app_key</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/2022/01/19/ES6/</url>
    <content><![CDATA[<h2 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h2><p>1、let 关键字 声明局部变量；</p>
<p>2、const 关键字 声明常量；</p>
<p>3、变量和对象的解构赋值 简化变量声明； </p>
<p>4、模板字符串 声明自带格式的字符串；</p>
<p>5、简化对象和函数写法 简化对象和函数写法；</p>
<p>6、箭头函数 简化函数写法；</p>
<p>7、ES6中函数参数的默认值 给函数的参数设置默认值；</p>
<p>8、rest参数 拿到实参； </p>
<span id="more"></span>

<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="let关键字"><a href="#let关键字" class="headerlink" title="let关键字"></a>let关键字</h3><p>1.不允许重复声明；</p>
<p>2.块级作用于(局部变量)；</p>
<p>3.不存在变量提升；</p>
<p>4.不影响作用域链；</p>
<h5 id="let创建变量"><a href="#let创建变量" class="headerlink" title="let创建变量"></a>let创建变量</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let关键字使用示例：</span></span><br><span class="line"><span class="keyword">let</span> a; <span class="comment">// 单个声明 </span></span><br><span class="line"><span class="keyword">let</span> b,c,d; <span class="comment">// 批量声明 </span></span><br><span class="line"><span class="keyword">let</span> e = <span class="number">100</span>; <span class="comment">// 单个声明并赋值 </span></span><br><span class="line"><span class="keyword">let</span> f = <span class="number">521</span>, g = <span class="string">&#x27;iloveyou&#x27;</span>, h = []; <span class="comment">// 批量声明并赋值</span></span><br></pre></td></tr></table></figure>

<h5 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 不允许重复声明； </span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">&quot;狗&quot;</span>; </span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">&quot;狗&quot;</span>; </span><br><span class="line"><span class="comment">// 报错：Uncaught SyntaxError: Identifier &#x27;dog&#x27; has already been declared</span></span><br></pre></td></tr></table></figure>

<h5 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 块儿级作用域（局部变量）； </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> cat = <span class="string">&quot;猫&quot;</span>; <span class="built_in">console</span>.log(cat); </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(cat); </span><br><span class="line"><span class="comment">// 报错：Uncaught ReferenceError: cat is not defined</span></span><br></pre></td></tr></table></figure>

<h5 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 不存在变量提升； </span></span><br><span class="line"><span class="comment">// 什么是变量提升：就是在变量创建之前使用（比如输出：输出的是默认值），let不存 在，var存在； </span></span><br><span class="line"><span class="built_in">console</span>.log(people1); <span class="comment">// 可输出默认值 </span></span><br><span class="line"><span class="built_in">console</span>.log(people2); <span class="comment">// 报错：Uncaught ReferenceError: people2 is not defined </span></span><br><span class="line"><span class="keyword">var</span> people1 = <span class="string">&quot;大哥&quot;</span>; <span class="comment">// 存在变量提升 </span></span><br><span class="line"><span class="keyword">let</span> people2 = <span class="string">&quot;二哥&quot;</span>; <span class="comment">// 不存在变量提升</span></span><br></pre></td></tr></table></figure>

<h5 id="不影响作用域"><a href="#不影响作用域" class="headerlink" title="不影响作用域"></a>不影响作用域</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 不影响作用域链；</span></span><br><span class="line"><span class="comment">// 什么是作用域链：很简单，就是代码块内有代码块，跟常规编程语言一样，上级代码块中 的局部变量下级可用</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">let</span> p = <span class="string">&quot;大哥&quot;</span>; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(p); <span class="comment">// 这里是可以使用的 </span></span><br><span class="line">    &#125;</span><br><span class="line">    fn(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.item</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取div元素对象 </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> items = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;item&#x27;</span>); </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 遍历并绑定事件 </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123; </span></span><br><span class="line"><span class="javascript">        items[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span></span><br><span class="line"><span class="javascript">            <span class="comment">// 修改当前元素的背景颜色 </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// this.style.background = &#x27;pink&#x27;; // 写法一：常规写法一般无异常 </span></span></span><br><span class="line"><span class="javascript">            items[i].style.background = <span class="string">&#x27;pink&#x27;</span>; <span class="comment">// 写法二 </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 写法二：需要注意的是for循环内的i必须使用let声明 </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 如果使用var就会报错，因为var是全局变量， </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 经过循环之后i的值会变成3，items[i]就会下标越界 </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// let是局部变量 </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 我们要明白的是当我们点击的时候，这个i是哪个值 </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 使用var相当于是： </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#123; var i = 0; &#125; </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#123; var i = 1; &#125; </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#123; var i = 2; &#125; </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#123; var i = 3; &#125; </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 下面的声明会将上面的覆盖掉，所以点击事件每次找到的都是3 </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 而使用let相当于是：</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#123; let i = 0; &#125; </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#123; let i = 1; &#125; </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#123; let i = 2; &#125; </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#123; let i = 3; &#125; </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 由于let声明的是局部变量，每一个保持着原来的值 </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 点击事件调用的时候拿到的是对应的i </span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明常量</span></span><br><span class="line"><span class="keyword">const</span> School = <span class="string">&quot;ES6&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>1.要赋初始值</p>
<p>2.常量使用大写(编程规范)</p>
<p>3.常量值不能修改</p>
<p>4.块级作用域</p>
<p>5.对const里面数组和对象的元素修改，不算对常量进行修改，因为地址没有改变</p>
<p><strong>声明对象类型使用 const，非对象类型声明选择 let</strong></p>
<h3 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为<strong>解构赋值</strong></p>
<h5 id="演示说明"><a href="#演示说明" class="headerlink" title="演示说明"></a>演示说明</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值； </span></span><br><span class="line"><span class="comment">// 1、数组的解构赋值 </span></span><br><span class="line"><span class="keyword">const</span> F4 = [<span class="string">&quot;大哥&quot;</span>,<span class="string">&quot;二哥&quot;</span>,<span class="string">&quot;三哥&quot;</span>,<span class="string">&quot;四哥&quot;</span>]; </span><br><span class="line"><span class="keyword">let</span> [a,b,c,d] = F4; </span><br><span class="line"><span class="comment">// 这就相当于我们声明4个变量a,b,c,d，其值分别对应&quot;大哥&quot;,&quot;二哥&quot;,&quot;三哥&quot;,&quot;四哥&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(a + b + c + d); <span class="comment">// 大哥二哥三哥四哥 </span></span><br><span class="line"><span class="comment">// 2、对象的解构赋值 </span></span><br><span class="line"><span class="keyword">const</span> F3 = &#123; </span><br><span class="line">    <span class="attr">name</span> : <span class="string">&quot;大哥&quot;</span>, </span><br><span class="line">    <span class="attr">age</span> : <span class="number">22</span>, </span><br><span class="line">    <span class="attr">sex</span> : <span class="string">&quot;男&quot;</span>, </span><br><span class="line">    <span class="attr">xiaopin</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 常用</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我会演小品！&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age,sex,xiaopin&#125; = F3; <span class="comment">// 注意解构对象这里用的是&#123;&#125; </span></span><br><span class="line"><span class="built_in">console</span>.log(name + age + sex + xiaopin); <span class="comment">// 大哥22男 </span></span><br><span class="line">xiaopin(); <span class="comment">// 此方法可以正常调用</span></span><br></pre></td></tr></table></figure>



<h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p>频繁使用对象方法、数组元素，就可以使用解构赋值形式</p>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>声明字符串的方法：单引号（’’）、双引号（””）、反引号（``） </p>
<p>内容中可以直接出现换行符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">let str=`<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>`;</span><br><span class="line">console.log(str)</span><br><span class="line">//打印结果</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>变量拼接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以使用 $&#123;xxx&#125; 形式引用变量 </span></span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;大哥&quot;</span>; </span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`<span class="subst">$&#123;s&#125;</span>是我最大的榜样！`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(out);</span><br><span class="line">大哥是我最大的榜样！</span><br></pre></td></tr></table></figure>

<h3 id="简化对象写法"><a href="#简化对象写法" class="headerlink" title="简化对象写法"></a>简化对象写法</h3><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6允许在对象的大括号内直接写入变量和函数作为对象的属性和方法 </span></span><br><span class="line"><span class="comment">// 变量和函数 </span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;sx&quot;</span>; </span><br><span class="line"><span class="keyword">let</span> change = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;活着就是为了改变摆烂！&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建对象 </span></span><br><span class="line"><span class="keyword">const</span> school = &#123; </span><br><span class="line">    <span class="comment">// 完整写法 </span></span><br><span class="line">    <span class="comment">// name:name, </span></span><br><span class="line">    <span class="comment">// change:change </span></span><br><span class="line">    <span class="comment">// 简化写法 </span></span><br><span class="line">    name, change, </span><br><span class="line">    <span class="comment">// 声明方法的简化 </span></span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;言行一致！&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">school.change(); </span><br><span class="line">school.say();</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>ES6允许使用箭头（=&gt;）定义函数，箭头函数提供了一种更加简洁的函数书写方式，箭头函数多用于匿</p>
<p>名函数的定义</p>
<h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><p>1.箭头函数this是静态的(this始终指向函数声明时所在作用域下的this值)</p>
<p>普通函数：谁调用this指向谁；箭头函数：我在哪里创建，this指向谁</p>
<p>2.不能作为构造实例化对象</p>
<p>3.不能使用arguments变量</p>
<p>箭头函数适合与 this 无关的回调. 定时器, 数组的方法回调 </p>
<p>箭头函数不适合与 this 有关的回调. 事件回调, 对象的方法 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6允许使用箭头（=&gt;）定义函数 </span></span><br><span class="line"><span class="comment">// 传统写法：无参数 </span></span><br><span class="line"><span class="keyword">var</span> say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello！&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line">say(); </span><br><span class="line"><span class="comment">// ES写法2：无参数 </span></span><br><span class="line"><span class="keyword">let</span> speak = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;hello 哈哈！&quot;</span>); </span><br><span class="line">speak(); </span><br><span class="line"><span class="comment">// 传统写法：一个参数 </span></span><br><span class="line"><span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(hello(<span class="string">&quot;sx&quot;</span>)); </span><br><span class="line"><span class="comment">// ES6箭头函数：一个参数 </span></span><br><span class="line"><span class="keyword">let</span> hi = <span class="function"><span class="params">name</span> =&gt;</span> <span class="string">&quot;hi &quot;</span> + name;</span><br><span class="line"><span class="built_in">console</span>.log(hi(<span class="string">&quot;sx&quot;</span>));</span><br><span class="line"><span class="comment">// 传统写法：多个参数 </span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a + b + c; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)); </span><br><span class="line"><span class="comment">// ES6箭头函数：多个参数 </span></span><br><span class="line"><span class="keyword">let</span> he = <span class="function">(<span class="params">a,b,c</span>) =&gt;</span> a + b + c; </span><br><span class="line"><span class="built_in">console</span>.log(he(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)); </span><br><span class="line"><span class="comment">// 特性 </span></span><br><span class="line"><span class="comment">// 1、箭头函数的this是静态的，始终指向函数声明时所在作用域下的this的值 </span></span><br><span class="line"><span class="keyword">const</span> school = &#123; </span><br><span class="line">    <span class="attr">name</span> : <span class="string">&quot;大哥&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传统函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;getName：&quot;</span> + <span class="built_in">this</span>.name); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数 </span></span><br><span class="line">getName1 = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;getName1：&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">&quot;sx&quot;</span>; </span><br><span class="line"><span class="comment">// 直接调用 </span></span><br><span class="line">getName(); </span><br><span class="line">getName1(); </span><br><span class="line"><span class="comment">// 使用call调用 </span></span><br><span class="line">getName.call(school); </span><br><span class="line">getName1.call(school); </span><br><span class="line"><span class="comment">// 结论：箭头函数的this是静态的，始终指向函数声明时所在作用域下的this的值 </span></span><br><span class="line"><span class="comment">// 2、不能作为构造实例化对象 </span></span><br><span class="line"><span class="comment">// let Persion = (name,age) =&gt; &#123; </span></span><br><span class="line"><span class="comment">// this.name = name; </span></span><br><span class="line"><span class="comment">// this.age = age; </span></span><br><span class="line"><span class="comment">// &#125; </span></span><br><span class="line"><span class="comment">// let me = new Persion(&quot;sx&quot;,24); </span></span><br><span class="line"><span class="comment">// console.log(me); </span></span><br><span class="line"><span class="comment">// 报错：Uncaught TypeError: Persion is not a constructor </span></span><br><span class="line"><span class="comment">// 3、不能使用 arguments 变量 </span></span><br><span class="line"><span class="comment">// let fn = () =&gt; console.log(arguments); </span></span><br><span class="line"><span class="comment">// fn(1,2,3); </span></span><br><span class="line"><span class="comment">// 报错：Uncaught ReferenceError: arguments is not defined</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求 从数组中返回偶数的元素 </span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">25</span>]; </span><br><span class="line"><span class="comment">// const result = arr.filter(function(item)&#123; </span></span><br><span class="line"><span class="comment">// if(item % 2 === 0)&#123; </span></span><br><span class="line"><span class="comment">// return true; </span></span><br><span class="line"><span class="comment">// &#125;else&#123; </span></span><br><span class="line"><span class="comment">// return false; </span></span><br><span class="line"><span class="comment">// &#125; </span></span><br><span class="line"><span class="comment">// &#125;); </span></span><br><span class="line"><span class="keyword">const</span> result = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>); </span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="ES6中函数参数的默认值"><a href="#ES6中函数参数的默认值" class="headerlink" title="ES6中函数参数的默认值"></a>ES6中函数参数的默认值</h3><p>ES允许给函数的参数赋初始值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6 允许给函数参数赋值初始值 </span></span><br><span class="line"><span class="comment">//1. 形参初始值 具有默认值的参数, 一般位置要靠后(编码规范) </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b,c=<span class="number">10</span></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a + b + c; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">1</span>,<span class="number">2</span>); </span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 13 </span></span><br><span class="line"><span class="comment">//2. 与解构赋值结合 </span></span><br><span class="line"><span class="comment">// 注意这里参数是一个对象 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">&#123;host=<span class="string">&quot;127.0.0.1&quot;</span>, username,password, port&#125;</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(host) </span><br><span class="line">    <span class="built_in">console</span>.log(username) </span><br><span class="line">    <span class="built_in">console</span>.log(password) </span><br><span class="line">    <span class="built_in">console</span>.log(port) &#125;</span><br><span class="line">connect(&#123; </span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;sx.com&#x27;</span>, </span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>, </span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>, </span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span> &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments；</p>
<p>参考文章：<a href="https://www.jianshu.com/p/50bcb376a419">https://www.jianshu.com/p/50bcb376a419</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments； </span></span><br><span class="line"><span class="comment">// ES5获取实参的方式 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">data</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); </span><br><span class="line">&#125;</span><br><span class="line">data(<span class="string">&quot;大哥&quot;</span>,<span class="string">&quot;二哥&quot;</span>,<span class="string">&quot;三哥&quot;</span>,<span class="string">&quot;四哥&quot;</span>);</span><br><span class="line"><span class="comment">// ES6的rest参数...args，rest参数必须放在最后面 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">data</span>(<span class="params">...args</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(args); <span class="comment">// fliter some every map </span></span><br><span class="line">&#125;</span><br><span class="line">data(<span class="string">&quot;大哥&quot;</span>,<span class="string">&quot;二哥&quot;</span>,<span class="string">&quot;三哥&quot;</span>,<span class="string">&quot;四哥&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>扩展运算符能将数组转换为逗号分隔的参数序列</p>
<p>扩展运算符（spread）也是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参</p>
<p>数序列，对数组进行解包</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 扩展运算符能将数组转换为逗号分隔的参数序列 </span></span><br><span class="line"><span class="comment">//声明一个数组 ... </span></span><br><span class="line"><span class="keyword">const</span> tfboys = [<span class="string">&#x27;易烊千玺&#x27;</span>, <span class="string">&#x27;王源&#x27;</span>, <span class="string">&#x27;王俊凯&#x27;</span>]; </span><br><span class="line"><span class="comment">// =&gt; &#x27;易烊千玺&#x27;,&#x27;王源&#x27;,&#x27;王俊凯&#x27; </span></span><br><span class="line"><span class="comment">// 声明一个函数 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunwan</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); &#125;</span><br><span class="line">chunwan(...tfboys); <span class="comment">// chunwan(&#x27;易烊千玺&#x27;,&#x27;王源&#x27;,&#x27;王俊凯&#x27;) </span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 数组的合并 情圣 误杀 唐探 </span></span><br><span class="line"><span class="keyword">const</span> kuaizi = [<span class="string">&#x27;王太利&#x27;</span>,<span class="string">&#x27;肖央&#x27;</span>]; </span><br><span class="line"><span class="keyword">const</span> fenghuang = [<span class="string">&#x27;曾毅&#x27;</span>,<span class="string">&#x27;玲花&#x27;</span>]; </span><br><span class="line"><span class="comment">// 传统的合并方式 </span></span><br><span class="line"><span class="comment">// const zuixuanxiaopingguo = kuaizi.concat(fenghuang); </span></span><br><span class="line"><span class="keyword">const</span> zuixuanxiaopingguo = [...kuaizi, ...fenghuang]; </span><br><span class="line"><span class="built_in">console</span>.log(zuixuanxiaopingguo); </span><br><span class="line"><span class="comment">//2. 数组的克隆 </span></span><br><span class="line"><span class="keyword">const</span> sanzhihua = [<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;M&#x27;</span>]; </span><br><span class="line"><span class="keyword">const</span> sanyecao = [...sanzhihua];<span class="comment">// [&#x27;E&#x27;,&#x27;G&#x27;,&#x27;M&#x27;] </span></span><br><span class="line"><span class="built_in">console</span>.log(sanyecao); </span><br><span class="line"><span class="comment">//3. 将伪数组转为真正的数组 </span></span><br><span class="line"><span class="keyword">const</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line"><span class="keyword">const</span> divArr = [...divs]; </span><br><span class="line"><span class="built_in">console</span>.log(divArr); <span class="comment">// arguments</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是JavaScript 语言的第七种数据类</p>
<p>型，是一种类似于字符串的数据类型；</p>
<p>参考文章：<a href="https://blog.csdn.net/fesfsefgs/article/details/108354248">https://blog.csdn.net/fesfsefgs/article/details/108354248</a></p>
<p>1.Symbol 的值是唯一的，用来解决命名冲突的问题</p>
<p>2.Symbol 值不能与其他数据进行运算</p>
<p>3.Symbol 定义的对象属性不能使用for…in循环遍历 ，但是可以使用Reflect.ownKeys 来获取对象的</p>
<p>所有键名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Symbol </span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>(); </span><br><span class="line"><span class="comment">// console.log(s, typeof s); </span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="built_in">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(s2==s3); <span class="comment">// false </span></span><br><span class="line"><span class="comment">//Symbol.for 创建 </span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;尚硅谷&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> s5 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;尚硅谷&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(s4==s5); <span class="comment">// true </span></span><br><span class="line"><span class="comment">//不能与其他数据进行运算 </span></span><br><span class="line"><span class="comment">// let result = s + 100; </span></span><br><span class="line"><span class="comment">// let result = s &gt; 100; </span></span><br><span class="line"><span class="comment">// let result = s + s; </span></span><br><span class="line"><span class="comment">// USONB you are so niubility </span></span><br><span class="line"><span class="comment">// u undefined </span></span><br><span class="line"><span class="comment">// s string symbol </span></span><br><span class="line"><span class="comment">// o object </span></span><br><span class="line"><span class="comment">// n null number </span></span><br><span class="line"><span class="comment">// b boolean</span></span><br></pre></td></tr></table></figure>

<h5 id="Symbol内置值"><a href="#Symbol内置值" class="headerlink" title="Symbol内置值"></a>Symbol内置值</h5><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方</p>
<p>法。可以称这些方法为魔术方法，因为它们会在特定的场景下自动执行</p>
<table>
<thead>
<tr>
<th><strong>内置<strong><strong>Symbol</strong></strong>的值</strong></th>
<th>调用时机</th>
</tr>
</thead>
<tbody><tr>
<td>Symbol.hasInstance</td>
<td>当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法</td>
</tr>
<tr>
<td>Symbol.isConcatSpreadable</td>
<td>对象的 Symbol.isConcatSpreadable 属性等于的是一个布尔值，表示该对象用于 Array.prototype.concat()时，是否可以展开。</td>
</tr>
<tr>
<td>Symbol.species</td>
<td>创建衍生对象时，会使用该属性</td>
</tr>
<tr>
<td>Symbol.match</td>
<td>当执行 str.match(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.replace</td>
<td>当该对象被 str.replace(myObject)方法调用时，会返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.search</td>
<td>当该对象被 str. search (myObject)方法调用时，会返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.split</td>
<td>当该对象被 str. split (myObject)方法调用时，会返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.iterator</td>
<td>对象进行 for…of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器</td>
</tr>
<tr>
<td>Symbol.toPrimitive</td>
<td>该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</td>
</tr>
<tr>
<td>Symbol. toStringTag</td>
<td>在该对象上面调用 toString 方法时，返回该方法的返回值</td>
</tr>
<tr>
<td>Symbol. unscopables</td>
<td>该对象指定了使用 with 关键字时，哪些属性会被 with环境排除</td>
</tr>
</tbody></table>
<p><strong>特别的：</strong> Symbol内置值的使用，<strong>都是作为某个对象类型的属性去使用</strong>；</p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器（Iterator）是一种接口，为各种不同的数据结构提供统一的访问机制。任何数</p>
<p>据结构只要部署 Iterator 接口，就可以完成遍历操作</p>
<p>ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费；</p>
<p>原生具备 iterator 接口的数据(可用 for of 遍历)：</p>
<h5 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h5><ol>
<li>创建一个指针对象，指向当前数据结构的起始位置；</li>
<li>第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员；</li>
<li>接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员；</li>
<li>每调用 next 方法返回一个包含 value 和 done 属性的对象；</li>
</ol>
<p><strong>需要自定义遍历数据的时候，要想到迭代器</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组 </span></span><br><span class="line"><span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;沙僧&#x27;</span>]; </span><br><span class="line"><span class="comment">// 使用 for...of 遍历数组 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> xiyou)&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = xiyou[<span class="built_in">Symbol</span>.iterator](); </span><br><span class="line"><span class="comment">// 调用对象的next方法 </span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); </span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); </span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); </span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); </span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); </span><br><span class="line"><span class="comment">// 重新初始化对象，指针也会重新回到最前面 </span></span><br><span class="line"><span class="keyword">let</span> iterator1 = xiyou[<span class="built_in">Symbol</span>.iterator](); </span><br><span class="line"><span class="built_in">console</span>.log(iterator1.next());</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代器自定义遍历对象</span></span><br><span class="line"><span class="comment">// 声明一个对象 </span></span><br><span class="line"><span class="keyword">const</span> banji = &#123; </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;一班&quot;</span>, </span><br><span class="line">    <span class="attr">stus</span>: [<span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaoning&#x27;</span>, <span class="string">&#x27;xiaotian&#x27;</span>, <span class="string">&#x27;knight&#x27;</span> ],</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="comment">// 索引变量 </span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>; </span><br><span class="line">        <span class="comment">// 保存this </span></span><br><span class="line">        <span class="keyword">let</span> _this = <span class="built_in">this</span>; </span><br><span class="line">        <span class="keyword">return</span> &#123; </span><br><span class="line">            <span class="attr">next</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">                <span class="keyword">if</span> (index &lt; _this.stus.length) &#123; </span><br><span class="line">                    <span class="keyword">const</span> result = &#123; </span><br><span class="line">                        <span class="attr">value</span>: _this.stus[index],</span><br><span class="line">                        <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">                    <span class="comment">// 下标自增</span></span><br><span class="line">                    index++; </span><br><span class="line">                    <span class="comment">// 返回结果 </span></span><br><span class="line">                    <span class="keyword">return</span> result; </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                    <span class="keyword">return</span> &#123; </span><br><span class="line">                        <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> </span><br><span class="line">                    &#125;; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历这个对象 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> banji) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>生成器函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同</p>
<h5 id="生成器基本使用"><a href="#生成器基本使用" class="headerlink" title="生成器基本使用"></a>生成器基本使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成器其实就是一个特殊的函数 </span></span><br><span class="line"><span class="comment">// 异步编程 纯回调函数 node fs ajax mongodb </span></span><br><span class="line"><span class="comment">// yield：函数代码的分隔符 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">111</span>); </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;一只没有耳朵&#x27;</span>; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">222</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;一只没有尾部&#x27;</span>; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">333</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;真奇怪&#x27;</span>; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">444</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen(); </span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); </span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); </span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); </span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;遍历：&quot;</span>); </span><br><span class="line"><span class="comment">//遍历 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> gen())&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(v); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="生成器函数参数传递"><a href="#生成器函数参数传递" class="headerlink" title="生成器函数参数传递"></a>生成器函数参数传递</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params">arg</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(arg); </span><br><span class="line">    <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>; </span><br><span class="line">    <span class="built_in">console</span>.log(one); </span><br><span class="line">    <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>; </span><br><span class="line">    <span class="built_in">console</span>.log(two); </span><br><span class="line">    <span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="number">333</span>; </span><br><span class="line">    <span class="built_in">console</span>.log(three); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen(<span class="string">&quot;AAA&quot;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// 会执行yield 111; </span></span><br><span class="line"><span class="comment">// next()方法是可以传入参数的，传入的参数作为第一条(上一条)语句yield 111的返回 结果 </span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next(<span class="string">&quot;BBB&quot;</span>)); <span class="comment">// 会执行yield 222; </span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next(<span class="string">&quot;CCC&quot;</span>)); <span class="comment">// 会执行yield 333; </span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next(<span class="string">&quot;DDD&quot;</span>)); <span class="comment">// 继续往后走，未定义;</span></span><br></pre></td></tr></table></figure>

<h5 id="生成器函数实例"><a href="#生成器函数实例" class="headerlink" title="生成器函数实例"></a>生成器函数实例</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步编程 文件操作 网络操作（ajax，request） 数据库操作 </span></span><br><span class="line"><span class="comment">// 需求：1s后控制台输出111 再过2s后控制台输出222 再过3s后控制台输出333 </span></span><br><span class="line"><span class="comment">// 一种做法：回调地狱</span></span><br><span class="line"><span class="comment">// setTimeout(()=&gt;&#123; </span></span><br><span class="line"><span class="comment">// console.log(111); </span></span><br><span class="line"><span class="comment">// setTimeout(()=&gt;&#123; </span></span><br><span class="line"><span class="comment">// console.log(222); </span></span><br><span class="line"><span class="comment">// setTimeout(()=&gt;&#123; </span></span><br><span class="line"><span class="comment">// console.log(333); </span></span><br><span class="line"><span class="comment">// &#125;,3000) </span></span><br><span class="line"><span class="comment">// &#125;,2000) </span></span><br><span class="line"><span class="comment">// &#125;,1000) </span></span><br><span class="line"><span class="comment">// 另一种做法 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">111</span>); </span><br><span class="line">        iterator.next(); </span><br><span class="line">    &#125;,<span class="number">1000</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">222</span>); </span><br><span class="line">        iterator.next(); </span><br><span class="line">    &#125;,<span class="number">1000</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">333</span>); </span><br><span class="line">        iterator.next(); </span><br><span class="line">    &#125;,<span class="number">1000</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">yield</span> one(); </span><br><span class="line">    <span class="keyword">yield</span> two(); </span><br><span class="line">    <span class="keyword">yield</span> three(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用生成器函数 </span></span><br><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟获取: 用户数据 订单数据 商品数据 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsers</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123; </span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&quot;用户数据&quot;</span>; </span><br><span class="line">        <span class="comment">// 第二次调用next，传入参数，作为第一个的返回值 </span></span><br><span class="line">        iterator.next(data); <span class="comment">// 这里将data传入 </span></span><br><span class="line">    &#125;,<span class="number">1000</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOrders</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123; </span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&quot;订单数据&quot;</span>; </span><br><span class="line">        iterator.next(data); <span class="comment">// 这里将data传入 </span></span><br><span class="line">    &#125;,<span class="number">1000</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGoods</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123; </span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&quot;商品数据&quot;</span>; i</span><br><span class="line">        terator.next(data); <span class="comment">// 这里将data传入 </span></span><br><span class="line">    &#125;,<span class="number">1000</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">let</span> users = <span class="keyword">yield</span> getUsers(); </span><br><span class="line">    <span class="built_in">console</span>.log(users); </span><br><span class="line">    <span class="keyword">let</span> orders = <span class="keyword">yield</span> getOrders(); </span><br><span class="line">    <span class="built_in">console</span>.log(orders); </span><br><span class="line">    <span class="keyword">let</span> goods = <span class="keyword">yield</span> getGoods(); </span><br><span class="line">    <span class="built_in">console</span>.log(goods); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen(); </span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure>

<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise 是 ES6 引入的<strong>异步编程的新解决方案</strong>。语法上 Promise 是一个<strong>构造函数</strong>，用来封装异步操作</p>
<p>并可以获取其成功或失败的结果</p>
<p>1.Promise 构造函数: Promise (excutor) {}； </p>
<p>2.Promise.prototype.then 方法；</p>
<p>3.Promise.prototype.catch 方法；</p>
<h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化 Promise 对象</span></span><br><span class="line"><span class="comment">// Promise 对象三种状态：初始化、成功、失败</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line"><span class="comment">// let data = &quot;数据&quot;;</span></span><br><span class="line"><span class="comment">// 调用resolve，这个Promise 对象的状态就会变成成功</span></span><br><span class="line"><span class="comment">// resolve(data);</span></span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line">        <span class="keyword">let</span> err = <span class="string">&quot;失败了！&quot;</span>;</span><br><span class="line">        reject(err);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line"><span class="comment">// 调用 Promise 对象的then方法，两个参数为函数</span></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; <span class="comment">// 成功</span></span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">season</span>)</span>&#123; <span class="comment">// 失败</span></span><br><span class="line">    <span class="built_in">console</span>.log(season);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="封装读取文件"><a href="#封装读取文件" class="headerlink" title="封装读取文件"></a>封装读取文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般写法</span></span><br><span class="line"><span class="comment">// 1、引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 2、调用方法，读取文件</span></span><br><span class="line">fs.readFile(<span class="string">&quot;./1.txt&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 如果失败则抛出错误</span></span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="comment">// 如果没有出错，则输出内容</span></span><br><span class="line"><span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//在终端使用node xxx.js来运行程序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Promise封装</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">&quot;./1.txt&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 判断如果失败</span></span><br><span class="line">        <span class="keyword">if</span>(err) reject(err);</span><br><span class="line"><span class="comment">// 如果成功</span></span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.toString());</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason); <span class="comment">// 读取失败</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Promise封装Ajax请求"><a href="#Promise封装Ajax请求" class="headerlink" title="Promise封装Ajax请求"></a>Promise封装Ajax请求</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求地址：https://api.apiopen.top/getJoke</span></span><br><span class="line"><span class="comment">// 原生请求</span></span><br><span class="line"><span class="comment">// 1、创建对象</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 2、初始化</span></span><br><span class="line">xhr.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line"><span class="comment">// 3、发送</span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">// 4、绑定事件，处理响应结果</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 判断状态</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="comment">// 判断响应状态码 200-299</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.status&gt;=<span class="number">200</span> &amp;&amp; xhr.status&lt;=<span class="number">299</span>)&#123;</span><br><span class="line">            <span class="comment">// 成功</span></span><br><span class="line">            <span class="built_in">console</span>.log(xhr.response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 失败</span></span><br><span class="line">           <span class="built_in">console</span>.error(xhr.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reason</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 1、创建对象</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 2、初始化</span></span><br><span class="line">xhr.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line"><span class="comment">// 3、发送</span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">// 4、绑定事件，处理响应结果</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 判断状态</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="comment">// 判断响应状态码 200-299</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.status&gt;=<span class="number">200</span> &amp;&amp; xhr.status&lt;=<span class="number">299</span>)&#123;</span><br><span class="line">            <span class="comment">// 成功</span></span><br><span class="line">            resolve(xhr.response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 失败</span></span><br><span class="line">            reason(xhr.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.toString());</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason); <span class="comment">// 读取失败</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then"></a>Promise.prototype.then</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 Promise 对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">&quot;用户数据&quot;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 调用then方法，then方法的返回结果是promise对象，</span></span><br><span class="line"><span class="comment">// 对象的状态有回调函数的结果决定;</span></span><br><span class="line"><span class="keyword">const</span> result = p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="comment">// 1、如果回调函数中返回的结果是 非promise 类型的数据，</span></span><br><span class="line">    <span class="comment">// 状态为成功，返回值为对象的成功值resolved</span></span><br><span class="line">    <span class="comment">// [[PromiseStatus]]:&quot;resolved&quot;</span></span><br><span class="line">    <span class="comment">// [[PromiseValue]]:123</span></span><br><span class="line">    <span class="comment">// return 123;</span></span><br><span class="line">    <span class="comment">// 2、如果...是promise类型的数据</span></span><br><span class="line">    <span class="comment">// 此Promise对象的状态决定上面Promise对象p的状态</span></span><br><span class="line">    <span class="comment">// return new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">// // resolve(&quot;ok&quot;); // resolved</span></span><br><span class="line">    <span class="comment">// reject(&quot;ok&quot;); // rejected</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    <span class="comment">// 3、抛出错误</span></span><br><span class="line">    <span class="comment">// throw new Error(&quot;失败啦！&quot;);</span></span><br><span class="line">    <span class="comment">// 状态：rejected</span></span><br><span class="line">    <span class="comment">// value：失败啦！</span></span><br><span class="line">&#125;,<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(reason);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 链式调用</span></span><br><span class="line"><span class="comment">// then里面两个函数参数，可以只写一个</span></span><br><span class="line">p.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;&#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;&#125;).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;&#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<h3 id="Promise实例"><a href="#Promise实例" class="headerlink" title="Promise实例"></a>Promise实例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 回调地狱</span></span><br><span class="line">fs.readFile(<span class="string">&quot;resources/text.txt&quot;</span>,<span class="function">(<span class="params">err,data1</span>)=&gt;</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">&quot;resources/test1.txt&quot;</span>,<span class="function">(<span class="params">err,data2</span>)=&gt;</span>&#123;</span><br><span class="line">        fs.readFile(<span class="string">&quot;resources/test2.txt&quot;</span>,<span class="function">(<span class="params">err,data3</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> result = data1 + data2 + data3;</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//Promise</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">&quot;resources/text.txt&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        fs.readFile(<span class="string">&quot;resources/test1.txt&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            resolve([value,data]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        fs.readFile(<span class="string">&quot;resources/test2.txt&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 存入数组</span></span><br><span class="line">            value.push(data);</span><br><span class="line">            resolve(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.join(<span class="string">&quot;\r\n&quot;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h5 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h5><p>ES6 提供了新的数据结构 Set。<strong>它类似于数组，但成员的值都是唯一的</strong>，集合实现了 iterator</p>
<p>接口，所以可以使用『扩展运算符』和『for…of…』进行遍历，集合的属性和方法：</p>
<p>1.size 返回集合的元素个数；</p>
<p>2.add 增加一个新元素，返回当前集合；</p>
<p>3.delete 删除元素，返回 boolean 值；</p>
<p>4.has 检测集合中是否包含某个元素，返回 boolean 值；</p>
<p>5.clear 清空集合，返回 undefined； </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set集合 </span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(); </span><br><span class="line"><span class="built_in">console</span>.log(s,<span class="keyword">typeof</span> s); </span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;大哥&quot;</span>,<span class="string">&quot;二哥&quot;</span>,<span class="string">&quot;三哥&quot;</span>,<span class="string">&quot;四哥&quot;</span>,<span class="string">&quot;三哥&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(s1); <span class="comment">// 自动去重 </span></span><br><span class="line"><span class="comment">// 1. size 返回集合的元素个数； </span></span><br><span class="line"><span class="built_in">console</span>.log(s1.size); </span><br><span class="line"><span class="comment">// 2. add 增加一个新元素，返回当前集合； </span></span><br><span class="line">s1.add(<span class="string">&quot;大姐&quot;</span>); <span class="built_in">console</span>.log(s1); </span><br><span class="line"><span class="comment">// 3. delete 删除元素，返回 boolean 值；</span></span><br><span class="line"><span class="keyword">let</span> result = s1.delete(<span class="string">&quot;三哥&quot;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(result); </span><br><span class="line"><span class="built_in">console</span>.log(s1); </span><br><span class="line"><span class="comment">// 4. has 检测集合中是否包含某个元素，返回 boolean 值； </span></span><br><span class="line"><span class="keyword">let</span> r1 = s1.has(<span class="string">&quot;二姐&quot;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(r1); </span><br><span class="line"><span class="comment">// 5. clear 清空集合，返回 undefined；</span></span><br><span class="line">s1.clear();</span><br><span class="line"><span class="built_in">console</span>.log(s1);</span><br></pre></td></tr></table></figure>

<h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类</p>
<p>型的值（包括对象）都可以当作键。Map 也实现了iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历</p>
<p>\1. size 返回 Map 的元素个数；</p>
<p>\2. set 增加一个新元素，返回当前 Map； </p>
<p>\3. get 返回键名对象的键值；</p>
<p>\4. has 检测 Map 中是否包含某个元素，返回 boolean 值；</p>
<p>\5. clear 清空集合，返回 undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Map集合 </span></span><br><span class="line"><span class="comment">// 创建一个空 map </span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); </span><br><span class="line"><span class="comment">// 创建一个非空</span></span><br><span class="line">map <span class="keyword">let</span> m2 = <span class="keyword">new</span> <span class="built_in">Map</span>([ </span><br><span class="line">    [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;尚硅谷&#x27;</span>], </span><br><span class="line">    [<span class="string">&#x27;slogon&#x27;</span>,<span class="string">&#x27;不断提高行业标准&#x27;</span>] </span><br><span class="line">]); </span><br><span class="line"><span class="comment">// 1. size 返回 Map 的元素个数； </span></span><br><span class="line"><span class="built_in">console</span>.log(m2.size); </span><br><span class="line"><span class="comment">// 2. set 增加一个新元素，返回当前 Map；</span></span><br><span class="line">m.set(<span class="string">&quot;皇帝&quot;</span>,<span class="string">&quot;大哥&quot;</span>); </span><br><span class="line">m.set(<span class="string">&quot;丞相&quot;</span>,<span class="string">&quot;二哥&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m); </span><br><span class="line"><span class="comment">// 3. get 返回键名对象的键值； </span></span><br><span class="line"><span class="built_in">console</span>.log(m.get(<span class="string">&quot;皇帝&quot;</span>));</span><br><span class="line"><span class="comment">// 4. has 检测 Map 中是否包含某个元素，返回 boolean 值；</span></span><br><span class="line"><span class="built_in">console</span>.log(m.has(<span class="string">&quot;皇帝&quot;</span>)); </span><br><span class="line"><span class="comment">// 5. clear 清空集合，返回 undefined；</span></span><br><span class="line">m.clear();</span><br><span class="line"><span class="built_in">console</span>.log(m);</span><br></pre></td></tr></table></figure>

<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过 class 关键字，可以定义类。基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已</p>
<p>\1. class 声明类；</p>
<p>\2. constructor 定义构造函数初始化；</p>
<p>\3. extends 继承父类；</p>
<p>\4. super 调用父级构造方法；</p>
<p>\5. static 定义静态方法和属性；</p>
<p>\6. 父类方法可以重写;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123; </span><br><span class="line">    <span class="comment">// 构造方法，名字是固定的 </span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">brand,price</span>)</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.brand = brand; </span><br><span class="line">        <span class="built_in">this</span>.price = price; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打电话，方法必须使用该方式写 </span></span><br><span class="line">    <span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我可以打电话！&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> HuaWei = <span class="keyword">new</span> Phone(<span class="string">&quot;华为&quot;</span>,<span class="number">5999</span>);</span><br><span class="line">HuaWei.call(); </span><br><span class="line"><span class="built_in">console</span>.log(HuaWei);</span><br><span class="line"><span class="comment">//class静态成员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123; </span><br><span class="line">    <span class="comment">// 静态属性 </span></span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&quot;手机&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">change</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我可以改变世界！&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> Phone(); </span><br><span class="line"><span class="built_in">console</span>.log(nokia.name); </span><br><span class="line"><span class="built_in">console</span>.log(Phone.name); </span><br><span class="line">Phone.change();</span><br></pre></td></tr></table></figure>

<h3 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h3><h5 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON"></a>Number.EPSILON</h5><p>Number.EPSILON 是 JavaScript 表示的最小精度；</p>
<p> EPSILON 属性的值接近于2.2204460492503130808472633361816E-16；</p>
<h5 id="二进制和八进制"><a href="#二进制和八进制" class="headerlink" title="二进制和八进制"></a>二进制和八进制</h5><p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀 0b 和 0o 表示</p>
<h5 id="Number方法"><a href="#Number方法" class="headerlink" title="Number方法"></a>Number方法</h5><p>1.Number.isFinite() 用来检查一个数值是否为有限的； </p>
<p>2.Number.isNaN() 用来检查一个值是否为 NaN；</p>
<p>3.Number.parseInt() 与 Number.parseFloat()： </p>
<p>ES6 将全局方法 parseInt 和 parseFloat，移植到 Number 对象上面，使用不变</p>
<p>4.Math.trunc：用于去除一个数的小数部分，返回整数部分</p>
<p>5.Number.isInteger() 用来判断一个数值是否为整数</p>
<h3 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h3><p>ES6 新增了一些 Object 对象的方法：</p>
<ol>
<li>Object.is 比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN）；</li>
<li> Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象；</li>
<li> proto、setPrototypeOf、 setPrototypeOf 可以直接设置对象的原型；</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象扩展</span></span><br><span class="line"><span class="comment">// 1. Object.is 比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN）；</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">120</span>,<span class="number">120</span>)); <span class="comment">// ===</span></span><br><span class="line"><span class="comment">// 注意下面的区别</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>);</span><br><span class="line"><span class="comment">// NaN与任何数值做===比较都是false，跟他自己也如此！</span></span><br><span class="line"><span class="comment">// 2. Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象；</span></span><br><span class="line"><span class="keyword">const</span> config1 = &#123;</span><br><span class="line"><span class="attr">host</span> : <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line"><span class="attr">port</span> : <span class="number">3306</span>,</span><br><span class="line"><span class="attr">name</span> : <span class="string">&quot;root&quot;</span>,</span><br><span class="line"><span class="attr">pass</span> : <span class="string">&quot;root&quot;</span>,</span><br><span class="line"><span class="attr">test</span> : <span class="string">&quot;test&quot;</span> <span class="comment">// 唯一存在</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> config2 = &#123;</span><br><span class="line"><span class="attr">host</span> : <span class="string">&quot;http://zibo.com&quot;</span>,</span><br><span class="line"><span class="attr">port</span> : <span class="number">300300600</span>,</span><br><span class="line"><span class="attr">name</span> : <span class="string">&quot;root4444&quot;</span>,</span><br><span class="line"><span class="attr">pass</span> : <span class="string">&quot;root4444&quot;</span>,</span><br><span class="line"><span class="attr">test2</span> : <span class="string">&quot;test2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果前边有后边没有会添加，如果前后都有，后面的会覆盖前面的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(config1,config2));</span><br><span class="line"><span class="comment">// 3. __proto__、setPrototypeOf、 getPrototypeOf 可以直接设置对象的原型；</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line"><span class="attr">name</span> : <span class="string">&quot;尚硅谷&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cities = &#123;</span><br><span class="line"><span class="attr">xiaoqu</span> : [<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 并不建议这么做</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(school,cities);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(school));</span><br><span class="line"><span class="built_in">console</span>.log(school);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来</p>
<p>模块化的优势有以下几点： 1. 防止命名冲突； 2. 代码复用； 3. 高维护性；</p>
<p>ES6 之前的模块化规范有： </p>
<ol>
<li>CommonJS =&gt; NodeJS、Browserify；</li>
<li> AMD =&gt; requireJS；</li>
<li> CMD =&gt; seaJS；</li>
</ol>
<p>模块功能主要由两个命令构成：export 和 import；</p>
<p>export 命令用于规定模块的对外接口（导出模块）； </p>
<p>import 命令用于输入其他模块提供的功能（导入模块）；</p>
<h5 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//m.js（导出模块）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> school = <span class="string">&quot;sx&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;开摆！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//引入m.js模块内容</span></span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&quot;./js/m.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(m);</span><br><span class="line"><span class="built_in">console</span>.log(m.school);</span><br><span class="line">m.teach();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="暴露方式"><a href="#暴露方式" class="headerlink" title="暴露方式"></a>暴露方式</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分别暴露（导出）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> school = <span class="string">&quot;sx&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">teach</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;开摆！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一暴露（导出）</span></span><br><span class="line"><span class="keyword">let</span> school = <span class="string">&quot;sx&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findJob</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;继续摆！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;school,findJob&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认暴露（导出）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line"><span class="attr">school</span> : <span class="string">&quot;sx&quot;</span>,</span><br><span class="line"><span class="attr">change</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;使劲摆！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入模块</span></span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line"><span class="comment">// 引入m.js模块内容</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&quot;./js/m.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(m);</span><br><span class="line"><span class="built_in">console</span>.log(m.school);</span><br><span class="line">m.teach();</span><br><span class="line"><span class="comment">// 引入n.js模块内容</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> n <span class="keyword">from</span> <span class="string">&quot;./js/n.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br><span class="line"><span class="built_in">console</span>.log(n.school);</span><br><span class="line">n.findJob();</span><br><span class="line"><span class="comment">// 引入o.js模块内容</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> o <span class="keyword">from</span> <span class="string">&quot;./js/o.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="comment">// 注意这里调用方法的时候需要加上default</span></span><br><span class="line"><span class="built_in">console</span>.log(o.default.school);</span><br><span class="line">o.default.change();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值形式</span></span><br><span class="line"><span class="keyword">import</span> &#123;school,teach&#125; <span class="keyword">from</span> <span class="string">&quot;./js/m.js&quot;</span>;</span><br><span class="line"><span class="comment">// 重名的可以使用别名</span></span><br><span class="line"><span class="keyword">import</span> &#123;school <span class="keyword">as</span> xuexiao,findJob&#125; <span class="keyword">from</span> <span class="string">&quot;./js/n.js&quot;</span>;</span><br><span class="line"><span class="comment">// 导入默认导出的模块，必须使用别名</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> one&#125; <span class="keyword">from</span> <span class="string">&quot;./js/o.js&quot;</span>;</span><br><span class="line"><span class="comment">// 直接可以使用</span></span><br><span class="line"><span class="built_in">console</span>.log(school);</span><br><span class="line">teach();</span><br><span class="line"><span class="built_in">console</span>.log(xuexiao);</span><br><span class="line"><span class="built_in">console</span>.log(one);</span><br><span class="line"><span class="built_in">console</span>.log(one.school);</span><br><span class="line">one.change();</span><br><span class="line"><span class="comment">// 简便形式，只支持默认导出</span></span><br><span class="line"><span class="keyword">import</span> oh <span class="keyword">from</span> <span class="string">&quot;./js/o.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(oh);</span><br><span class="line"><span class="built_in">console</span>.log(oh.school);</span><br><span class="line">oh.change();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="规范使用"><a href="#规范使用" class="headerlink" title="规范使用"></a>规范使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将js语法整合到一个文件app.js</span></span><br><span class="line"><span class="comment">// 引入m.js模块内容</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&quot;./m.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(m);</span><br><span class="line"><span class="built_in">console</span>.log(m.school);</span><br><span class="line">m.teach();</span><br><span class="line"></span><br><span class="line"><span class="comment">//html使用</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/app.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="出现错误"><a href="#出现错误" class="headerlink" title="出现错误"></a><strong>出现错误</strong></h5><p>在浏览器中打开，发现又报错了：Access to script at ‘file:///E:/**********/indexes.js’ from origin ‘null’ has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, chrome-untrusted, https.</p>
<p>从错误提示看，脚本是被跨域策略给拦截了，跨域请求只支持这些协议：http, data, chrome, chrome-extension, chrome-untrusted, https.，而我们的协议是file，这里我们需要本地起一个服务器来作为资源的提供方，简单的方式是安装VSCode的一个扩展Live Server</p>
<h3 id="Babel对ES6模块化代码转换"><a href="#Babel对ES6模块化代码转换" class="headerlink" title="Babel对ES6模块化代码转换"></a>Babel对ES6模块化代码转换</h3><p>Babel概述： Babel 是一个 JavaScript 编译器；</p>
<p> Babel 能够将新的ES规范语法转换成ES5的语法； </p>
<p>因为不是所有的浏览器都支持最新的ES规范，所以，一般项目中都需要使用Babel进行转换；</p>
<p>步骤：使用Babel转换JS代码——打包成一个文件——使用时引入即可；</p>
<p>第一步：安装工具babel-cli（命令行工具） babel-preset-env（ES转换工具） browserify（打包工具， 项目中使用的是webpack）；</p>
<p>第二步：初始化项目    </p>
<p><code>npm init -y</code></p>
<p>第三步：安装    </p>
<p><code>npm i babel-cli babel-preset-env browserify</code></p>
<p>第四步：使用babel转换  </p>
<p>  <code>npx babel js（js目录） -d dist/js（转化后的js目录） --presets=babel-preset-env</code></p>
<p>第五步：打包    </p>
<p><code>npx browserify dist/js/app.js -o dist/bundle.js</code></p>
<p>第六步：在使用时引入bundle.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./js/bundle.js&quot;</span> type=<span class="string">&quot;module&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="ES7新特性"><a href="#ES7新特性" class="headerlink" title="ES7新特性"></a>ES7新特性</h2><p>1、Array.prototype.includes </p>
<p>判断数组中是否包含某元素，返回布尔类型值，语法：arr.includes(元素值)；</p>
<p> 2、指数操作符 </p>
<p>用来实现幂运算，功能与 Math.pow 结果相同，幂运算的简化写法，例如：2的10次方：2**10；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// includes</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>));</span><br><span class="line"><span class="comment">// 指数操作符</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">10</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>**<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<h2 id="ES8新特性"><a href="#ES8新特性" class="headerlink" title="ES8新特性"></a>ES8新特性</h2><p>1.async 和 await</p>
<p>简化异步函数的写法</p>
<p>2.对象方法扩展</p>
<h3 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h3><h5 id="async-函数："><a href="#async-函数：" class="headerlink" title="async 函数："></a>async 函数：</h5><p>1.async 函数的返回值为 promise 对象；</p>
<p>2.promise 对象的结果由 async 函数执行的返回值决定；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// async函数：异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// return 123; // 返回普通数据</span></span><br><span class="line"><span class="comment">// 若报错，则返回的Promise对象也是错误的</span></span><br><span class="line"><span class="comment">// throw new Error(&quot;出错啦！&quot;);</span></span><br><span class="line"><span class="comment">// 若返回的是Promise对象，那么返回的结果就是Promise对象的结果</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// resolve(&quot;成功啦！&quot;);</span></span><br><span class="line">    reject(<span class="string">&quot;失败啦！&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = fn();</span><br><span class="line"><span class="comment">// console.log(result); // 返回的结果是一个Promise对象</span></span><br><span class="line"><span class="comment">// 调用then方法</span></span><br><span class="line">result.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;,<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.warn(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="await-表达式"><a href="#await-表达式" class="headerlink" title="await 表达式"></a>await 表达式</h5><p>1.await 必须写在 async 函数中；</p>
<p>2.await 右侧的表达式一般为 promise 对象；</p>
<p>3.await 返回的是 promise 成功的值；</p>
<p>4.await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// async函数 + await表达式：异步函数</span></span><br><span class="line"><span class="comment">// 创建Prmise对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">&quot;成功啦！&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// await 返回的是 promise 成功的值</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> p;</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// 成功啦！</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<h5 id="async-和-await-读取文件"><a href="#async-和-await-读取文件" class="headerlink" title="async 和 await 读取文件"></a>async 和 await 读取文件</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&quot;../resources/text.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//如果失败</span></span><br><span class="line">            <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">            <span class="comment">//如果成功</span></span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readTest1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">fs.readFile(<span class="string">&quot;../resources/test1.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//如果失败</span></span><br><span class="line"><span class="keyword">if</span> (err) reject(err);</span><br><span class="line"><span class="comment">//如果成功</span></span><br><span class="line">resolve(data);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readTest2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&quot;../resources/test2.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//如果失败</span></span><br><span class="line">            <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">            <span class="comment">//如果成功</span></span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明一个 async 函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取文本0</span></span><br><span class="line">    <span class="keyword">let</span> t0 = <span class="keyword">await</span> readText();</span><br><span class="line">    <span class="comment">//获取文本1</span></span><br><span class="line">    <span class="keyword">let</span> t1 = <span class="keyword">await</span> readTest1();</span><br><span class="line">    <span class="comment">// 获取文本2</span></span><br><span class="line">    <span class="keyword">let</span> t2 = <span class="keyword">await</span> readTest2();</span><br><span class="line">    <span class="built_in">console</span>.log(t0.toString());</span><br><span class="line">    <span class="built_in">console</span>.log(t1.toString());</span><br><span class="line">    <span class="built_in">console</span>.log(t2.toString());</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure>

<h5 id="async-和-await-结合发送ajax请求"><a href="#async-和-await-结合发送ajax请求" class="headerlink" title="async 和 await 结合发送ajax请求"></a>async 和 await 结合发送ajax请求</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// async 和 await 结合发送ajax请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendAjax</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建对象</span></span><br><span class="line">        <span class="keyword">const</span> x = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="comment">// 2、初始化</span></span><br><span class="line">        x.open(<span class="string">&quot;GET&quot;</span>,url);</span><br><span class="line">        <span class="comment">// 3、发送</span></span><br><span class="line">        x.send();</span><br><span class="line">        <span class="comment">// 4、事件绑定</span></span><br><span class="line">        x.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(x.status&gt;=<span class="number">200</span> &amp;&amp; x.status&lt;=<span class="number">299</span>)&#123;</span><br><span class="line">                    <span class="comment">// 成功</span></span><br><span class="line">                    resolve(x.response);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 失败</span></span><br><span class="line">                    reject(x.status);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="comment">// const result = sendAjax(&quot;https://api.apiopen.top/getJoke&quot;);</span></span><br><span class="line"><span class="comment">// result.then(value=&gt;&#123;</span></span><br><span class="line"><span class="comment">// console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;,reason=&gt;&#123;</span></span><br><span class="line"><span class="comment">// console.warn(reason);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// 使用async和await</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> sendAjax(<span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure>

<h3 id="对象方法扩展"><a href="#对象方法扩展" class="headerlink" title="对象方法扩展"></a>对象方法扩展</h3><p>Object.values()方法：返回一个给定对象的所有可枚举属性值的数组</p>
<p>Object.entries()方法：返回一个给定对象自身可遍历属性 [key,value] 的数</p>
<p>Object.getOwnPropertyDescriptors()该方法：返回指定对象所有自身属性的描述对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象方法扩展</span></span><br><span class="line"><span class="keyword">let</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span> : <span class="string">&quot;訾博&quot;</span>,</span><br><span class="line">    <span class="attr">age</span> : <span class="number">24</span>,</span><br><span class="line">    <span class="attr">sex</span> : <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取对象所有的键</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(school));</span><br><span class="line"><span class="comment">// 获取对象所有的值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(school));</span><br><span class="line"><span class="comment">// 获取对象的entries</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(school));</span><br><span class="line"><span class="comment">// 创建map</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(school));</span><br><span class="line"><span class="built_in">console</span>.log(map);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"><span class="comment">// 返回指定对象所有自身属性的描述对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(school));</span><br><span class="line"><span class="comment">// 参考内容：</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>,&#123;</span><br><span class="line">    <span class="attr">name</span> : &#123;</span><br><span class="line">        <span class="comment">// 设置值</span></span><br><span class="line">        <span class="attr">value</span> : <span class="string">&quot;訾博&quot;</span>,</span><br><span class="line">        <span class="comment">// 属性特性</span></span><br><span class="line">        <span class="attr">writable</span> : <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configuration</span> : <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span> : <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="ES9新特性"><a href="#ES9新特性" class="headerlink" title="ES9新特性"></a>ES9新特性</h2><p>Rest 参数与 spread 扩展运算符：在对象中使Rest参数与spread扩展运算符</p>
<p>正则扩展：简化和增强正则匹配</p>
<h3 id="Rest-参数与-spread-扩展运算符"><a href="#Rest-参数与-spread-扩展运算符" class="headerlink" title="Rest 参数与 spread 扩展运算符"></a>Rest 参数与 spread 扩展运算符</h3><p>Rest 参数与 spread 扩展运算符在 ES6 中已经引入，不过 ES6 中只针对于数组，在 ES9 中为对象提供了 像数组一样的 rest 参数和扩展运算符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Rest参数与spread扩展运算符</span></span><br><span class="line"><span class="comment">// Rest 参数与 spread 扩展运算符在 ES6 中已经引入，</span></span><br><span class="line"><span class="comment">// 不过 ES6 中只针对于数组，在 ES9 中为对象提供了像</span></span><br><span class="line"><span class="comment">// 数组一样的 rest 参数和扩展运算符；</span></span><br><span class="line"><span class="comment">//rest 参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    host,</span></span></span><br><span class="line"><span class="params"><span class="function">    port,</span></span></span><br><span class="line"><span class="params"><span class="function">    ...user <span class="regexp">//</span>重点是...，后面变量名可以自定义</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(host);</span><br><span class="line">    <span class="built_in">console</span>.log(port);</span><br><span class="line">    <span class="built_in">console</span>.log(user);</span><br><span class="line">&#125;</span><br><span class="line">connect(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;master&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//对象合并</span></span><br><span class="line"><span class="keyword">const</span> skillOne = &#123;</span><br><span class="line">    <span class="attr">q</span>: <span class="string">&#x27;天音波&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> skillTwo = &#123;</span><br><span class="line">    <span class="attr">w</span>: <span class="string">&#x27;金钟罩&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> skillThree = &#123;</span><br><span class="line">    <span class="attr">e</span>: <span class="string">&#x27;天雷破&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> skillFour = &#123;</span><br><span class="line">    <span class="attr">r</span>: <span class="string">&#x27;猛龙摆尾&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mangseng = &#123;</span><br><span class="line">    ...skillOne,</span><br><span class="line">    ...skillTwo,</span><br><span class="line">    ...skillThree,</span><br><span class="line">    ...skillFour</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(mangseng)</span><br><span class="line"><span class="comment">// ...skillOne =&gt; q: &#x27;天音波&#x27;, w: &#x27;金钟罩&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="正则扩展：命名捕获分组"><a href="#正则扩展：命名捕获分组" class="headerlink" title="正则扩展：命名捕获分组"></a>正则扩展：命名捕获分组</h3><p>ES9 允许命名捕获组使用符号『?』,这样获取捕获结果可读性更强</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正则扩展：命名捕获分组</span></span><br><span class="line"><span class="comment">// 声明一个字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;sx&lt;/a&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">// 需求：提取url和标签内文本</span></span><br><span class="line"><span class="comment">// 之前的写法</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(.*)&quot;&gt;(.*)&lt;\/a&gt;/</span>;</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="keyword">const</span> result = reg.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 结果是一个数组，第一个元素是所匹配的所有字符串</span></span><br><span class="line"><span class="comment">// 第二个元素是第一个(.*)匹配到的字符串</span></span><br><span class="line"><span class="comment">// 第三个元素是第二个(.*)匹配到的字符串</span></span><br><span class="line"><span class="comment">// 我们将此称之为捕获</span></span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 命名捕获分组</span></span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span>;</span><br><span class="line"><span class="keyword">const</span> result1 = reg1.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br><span class="line"><span class="comment">// 这里的结果多了一个groups</span></span><br><span class="line"><span class="comment">// groups:</span></span><br><span class="line"><span class="comment">// text:&quot;sx&quot;</span></span><br><span class="line"><span class="comment">// url:&quot;http://www.baidu.com&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(result1.groups.url);</span><br><span class="line"><span class="built_in">console</span>.log(result1.groups.text);</span><br></pre></td></tr></table></figure>

<h3 id="正则扩展：反向断言"><a href="#正则扩展：反向断言" class="headerlink" title="正则扩展：反向断言"></a>正则扩展：反向断言</h3><p>ES9 支持反向断言，通过对匹配结果前面的内容进行判断，对匹配进行筛选</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正则扩展：反向断言</span></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;JS5201314你知道么555啦啦啦&quot;</span>;</span><br><span class="line"><span class="comment">// 需求：我们只想匹配到555</span></span><br><span class="line"><span class="comment">// 正向断言</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/\d+(?=啦)/</span>; <span class="comment">// 前面是数字后面是啦</span></span><br><span class="line"><span class="keyword">const</span> result = reg.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 反向断言</span></span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/(?&lt;=么)\d+/</span>; <span class="comment">// 后面是数字前面是么</span></span><br><span class="line"><span class="keyword">const</span> result1 = reg.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br></pre></td></tr></table></figure>

<h3 id="正则扩展：dotAll-模式"><a href="#正则扩展：dotAll-模式" class="headerlink" title="正则扩展：dotAll 模式"></a>正则扩展：dotAll 模式</h3><p>正则表达式中点.匹配除回车外的任何单字符，标记『s』改变这种行为，允许行终止符出现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正则扩展：dotAll 模式</span></span><br><span class="line"><span class="comment">// dot就是. 元字符，表示除换行符之外的任意单个字符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;肖生克的救赎&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;阿甘正传&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="comment">// 需求：我们想要将其中的电影名称和对应上映时间提取出来，存到对象</span></span><br><span class="line"><span class="comment">// 之前的写法</span></span><br><span class="line"><span class="comment">// const reg = /&lt;li&gt;\s+&lt;a&gt;(.*?)&lt;\/a&gt;\s+&lt;p&gt;(.*?)&lt;\/p&gt;/;</span></span><br><span class="line"><span class="comment">// dotAll 模式</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/g</span>s;</span><br><span class="line"><span class="comment">// const result = reg.exec(str);</span></span><br><span class="line"><span class="comment">// console.log(result);</span></span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line"><span class="keyword">while</span>(result = reg.exec(str))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    data.push(&#123;<span class="attr">title</span>:result[<span class="number">1</span>],<span class="attr">time</span>:result[<span class="number">2</span>]&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ES10新特性"><a href="#ES10新特性" class="headerlink" title="ES10新特性"></a>ES10新特性</h2><p>Object.fromEntries： 将二维数组或者map转换成对象</p>
<p>trimStart 和 trimEnd ：去除字符串前后的空白字符</p>
<p>Array.prototype.flat 与 flatMap ：将多维数组降维</p>
<p>Symbol.prototype.description ：获取Symbol的字符串描述</p>
<h3 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries"></a>Object.fromEntries</h3><p>将二维数组或者map转换成对象</p>
<p> 之前学的Object.entries是将对象转换成二维数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.fromEntries：将二维数组或者map转换成对象</span></span><br><span class="line"><span class="comment">// 之前学的Object.entries是将对象转换成二维数组</span></span><br><span class="line"><span class="comment">// 此方法接收的是一个二维数组，或者是一个map集合</span></span><br><span class="line"><span class="comment">// 二维数组</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">Object</span>.fromEntries([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;sx&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;age&quot;</span>,<span class="number">24</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;sx&quot;</span>);</span><br><span class="line">m.set(<span class="string">&quot;age&quot;</span>,<span class="number">24</span>);</span><br><span class="line"><span class="keyword">const</span> result1 = <span class="built_in">Object</span>.fromEntries(m);</span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br></pre></td></tr></table></figure>

<h3 id="trimStart-和-trimEnd"><a href="#trimStart-和-trimEnd" class="headerlink" title="trimStart 和 trimEnd"></a>trimStart 和 trimEnd</h3><p>去掉字符串前后的空白字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// trimStart 和 trimEnd</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot; bailan &quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.trimLeft());</span><br><span class="line"><span class="built_in">console</span>.log(str.trimRight());</span><br><span class="line"><span class="built_in">console</span>.log(str.trimStart());</span><br><span class="line"><span class="built_in">console</span>.log(str.trimEnd());</span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-flat-与-flatMap"><a href="#Array-prototype-flat-与-flatMap" class="headerlink" title="Array.prototype.flat 与 flatMap"></a>Array.prototype.flat 与 flatMap</h3><p>将多维数组转换成低维数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.flat 与 flatMap</span></span><br><span class="line"><span class="comment">// flat</span></span><br><span class="line"><span class="comment">// 将多维数组转换成低维数组</span></span><br><span class="line"><span class="comment">// 将二维数组转换成一维数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>],<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat());</span><br><span class="line"><span class="comment">// 将三维数组转换成二维数组</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,[<span class="number">6</span>,<span class="number">7</span>]],<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr2.flat());</span><br><span class="line"><span class="comment">// 将三维数组转换成一维数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.flat(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// flatMap</span></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result0 = arr3.map(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result0);</span><br><span class="line"><span class="keyword">const</span> result = arr3.map(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="keyword">const</span> result1 = arr3.flatMap(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br></pre></td></tr></table></figure>

<h3 id="Symbol-prototype-description"><a href="#Symbol-prototype-description" class="headerlink" title="Symbol.prototype.description"></a>Symbol.prototype.description</h3><p>获取Symbol的描述字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Symbol.prototype.description</span></span><br><span class="line"><span class="comment">// 获取Symbol的描述字符串</span></span><br><span class="line"><span class="comment">// 创建Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>(<span class="string">&quot;sx&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s.description)</span><br></pre></td></tr></table></figure>

<h2 id="ES11新特性"><a href="#ES11新特性" class="headerlink" title="ES11新特性"></a>ES11新特性</h2><p>String.prototype.matchAll ：用来得到正则批量匹配的结果</p>
<p>类的私有属性：私有属性外部不可访问直接</p>
<p>Promise.allSettled：获取多个promise执行的结果集</p>
<p>可选链操作符：简化对象存在的判断逻辑</p>
<p>动态 import 导入：动态导入模块，什么时候使用什么时候导入</p>
<p>BigInt：大整型</p>
<p>globalThis 对象：始终指向全局对象window</p>
<h3 id="String-prototype-matchAll"><a href="#String-prototype-matchAll" class="headerlink" title="String.prototype.matchAll"></a>String.prototype.matchAll</h3><p>用来得到正则批量匹配的结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String.prototype.matchAll</span></span><br><span class="line"><span class="comment">// 用来得到正则批量匹配的结果</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;肖生克的救赎&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;阿甘正传&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="comment">// 正则</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/</span>sg;</span><br><span class="line"><span class="keyword">const</span> result = str.matchAll(reg);</span><br><span class="line"><span class="comment">// 返回的是可迭代对象，可用扩展运算符展开</span></span><br><span class="line"><span class="comment">// console.log(...result);</span></span><br><span class="line"><span class="comment">// 使用for...of...遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> result)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h3><p>私有属性外部不可访问直接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类的私有属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">// 公有属性</span></span><br><span class="line">    name;</span><br><span class="line">    <span class="comment">// 私有属性</span></span><br><span class="line">    #age;</span><br><span class="line">    #weight;</span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age, weight</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.#age = age;</span><br><span class="line">        <span class="built_in">this</span>.#weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">intro</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.#age);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.#weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> girl = <span class="keyword">new</span> Person(<span class="string">&quot;小兰&quot;</span>,<span class="number">18</span>,<span class="string">&quot;90kg&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(girl);</span><br><span class="line"><span class="comment">// 公有属性的访问</span></span><br><span class="line"><span class="built_in">console</span>.log(girl.name);</span><br><span class="line"><span class="comment">// 私有属性的访问</span></span><br><span class="line"><span class="built_in">console</span>.log(girl.age); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 报错Private field &#x27;#age&#x27; must be declared in an enclosing class</span></span><br><span class="line"><span class="comment">// console.log(girl.#age);</span></span><br><span class="line">girl.intro();</span><br></pre></td></tr></table></figure>

<h3 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h3><p>获取多个promise执行的结果集</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Promise.allSettled</span></span><br><span class="line"><span class="comment">// 获取多个promise执行的结果集</span></span><br><span class="line"><span class="comment">// 声明两个promise对象</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">&quot;商品数据——1&quot;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        reject(<span class="string">&quot;失败啦&quot;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 调用Promise.allSettled方法</span></span><br><span class="line"><span class="comment">//有失败还是全失败都返回成功</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">Promise</span>.allSettled([p1,p2]);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="keyword">const</span> result1 = <span class="built_in">Promise</span>.all([p1,p2]); <span class="comment">// 注意区别</span></span><br><span class="line"><span class="comment">//有一个就失败就返回失败</span></span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br></pre></td></tr></table></figure>

<h3 id="可选链操作符"><a href="#可选链操作符" class="headerlink" title="可选链操作符"></a>可选链操作符</h3><p>如果存在则往下走，省略对对象是否传入的层层判断</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可选链操作符</span></span><br><span class="line"><span class="comment">// ?.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 传统写法</span></span><br><span class="line">    <span class="comment">// const dbHost = config &amp;&amp; config.db &amp;&amp; config.db.host;</span></span><br><span class="line">    <span class="comment">// 可选链操作符写法</span></span><br><span class="line">    <span class="keyword">const</span> dbHost = config?.db?.host;</span><br><span class="line">    <span class="built_in">console</span>.log(dbHost);</span><br><span class="line">    &#125;</span><br><span class="line">main(&#123;</span><br><span class="line">    <span class="attr">db</span>:&#123;</span><br><span class="line">        <span class="attr">host</span>:<span class="string">&quot;192.168.1.100&quot;</span>,</span><br><span class="line">        <span class="attr">username</span>:<span class="string">&quot;root&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cache</span>:&#123;</span><br><span class="line">        <span class="attr">host</span>:<span class="string">&quot;192.168.1.200&quot;</span>,</span><br><span class="line">        <span class="attr">username</span>:<span class="string">&quot;admin&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="动态-import-导入"><a href="#动态-import-导入" class="headerlink" title="动态 import 导入"></a>动态 import 导入</h3><p>动态导入模块，什么时候使用时候导入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//hello.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="comment">// import * as m1 from &quot;./hello.js&quot;; // 传统静态导入</span></span><br><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;./hello.js&#x27;</span>).then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">module</span>.hello();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;点击&lt;/button&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h3><p>更大的整数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BigInt</span></span><br><span class="line"><span class="comment">// 大整型</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">100n</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n,<span class="keyword">typeof</span>(n));</span><br><span class="line"><span class="comment">// 函数：普通整型转大整型</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">BigInt</span>(m));</span><br><span class="line"><span class="comment">// 用于更大数值的运算</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br><span class="line"><span class="built_in">console</span>.log(max+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(max+<span class="number">2</span>); <span class="comment">// 出错了</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">BigInt</span>(max));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">BigInt</span>(max)+<span class="built_in">BigInt</span>(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">BigInt</span>(max)+<span class="built_in">BigInt</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<h3 id="globalThis-对象"><a href="#globalThis-对象" class="headerlink" title="globalThis 对象"></a>globalThis 对象</h3><p>始终指向全局对象window</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// globalThis 对象 : 始终指向全局对象window</span></span><br><span class="line"><span class="built_in">console</span>.log(globalThis);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis笔记</title>
    <url>/2022/01/26/MyBatis%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h3><p><a href="https://baomidou.com/">MyBatis-Plus</a>官方网站</p>
<p>🚀为简化开发而生</p>
<span id="more"></span>

<h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/demo?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=GMT%2b8</span></span><br></pre></td></tr></table></figure>

<h5 id="dao-service"><a href="#dao-service" class="headerlink" title="dao-service"></a>dao-service</h5><p>pojo层：实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mapper层：crud</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//扫描mapper文件夹</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mapper&quot;)</span></span><br><span class="line"><span class="comment">//在启动类上添加@MapperScan注解，mapper地址要对，否则不生效</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TtooApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TtooApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TtooApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//继承了BaseMapper，所有方法都来自父类</span></span><br><span class="line">    <span class="comment">//也可以编写自己的扩展方法</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询所有用户</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//输出用户数据</span></span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><p>原理:</p>
<ul>
<li>实现元对象处理器接口：com.baomidou.mybatisplus.core.handlers.MetaObjectHandler</li>
<li>注解填充字段 <code>@TableField(.. fill = FieldFill.INSERT)</code> 生成器策略部分也可以配置！</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实体类添加注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意！这里需要标记为填充字段</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义实现类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UerHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在springboot启动类中添加</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_04</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Page&lt;Uer&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        uerMapper.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line">        page.getRecords().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>page.getPages(); //一共多少页<br>page.getTotal();//一共多少条数据<br>page.getCurrent(); //当前第几页<br>page.getRecords();//获取分页后的数据</p>
<h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><p>物理删除：从数据库中直接删除<br>逻辑删除：在数据库中没有被移除，而是通过变量让其失效</p>
<p>管理员可以查看被删除的记录，防止数据丢失，类似回收站<br>本质是更新操作</p>
<p>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">flag</span> <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>

<p>实体类加上注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法实现</span></span><br><span class="line"><span class="comment">//逻辑删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_05</span><span class="params">()</span></span>&#123;</span><br><span class="line">        uerMapper.deleteById(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>恢复删除<br>自定义BaseMapper方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UerMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Uer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//添加select注解，()为sql语句，把deleted设为0即可</span></span><br><span class="line">    <span class="meta">@Select(&quot; update uer set deleted = 0 where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">recoveryById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_05</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//uerMapper.deleteById(6);</span></span><br><span class="line">        uerMapper.recoveryById(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//参数是一个wrapper ，条件构造器，和刚才的map对比学习！</span></span><br><span class="line">    <span class="comment">//查询name不为空，email不为空，age大于18的用户</span></span><br><span class="line">    QueryWrapper&lt;Uer&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper</span><br><span class="line">            .isNotNull(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">            .isNotNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">            .ge(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    List&lt;Uer&gt; userList = uerMapper.selectList(wrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询name=wsk的用户</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;wsk&quot;</span>);</span><br><span class="line">    <span class="comment">//查询一个数据selectOne，若查询出多个会报错</span></span><br><span class="line">    <span class="comment">//Expected one result (or null) to be returned by selectOne(), but found: *</span></span><br><span class="line">    <span class="comment">//若出现多个结果使用list或map</span></span><br><span class="line">    User user = userMapper.selectOne(wrapper);<span class="comment">//查询一个数据，若出现多个结果使用list或map</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询age在10-20之间的用户</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.between(<span class="string">&quot;age&quot;</span>, <span class="number">10</span>, <span class="number">20</span>);<span class="comment">//区间</span></span><br><span class="line">    Long count = userMapper.selectCount(wrapper);<span class="comment">//输出查询的数量selectCount</span></span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h3><p>我们所有的sql是不可见的，我们希望知道他们是怎么执行的，所以要配置日志知道</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<h3 id="代码自动生成器"><a href="#代码自动生成器" class="headerlink" title="代码自动生成器"></a>代码自动生成器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--模板引擎 依赖:mybatis-plus代码生成的时候报异常--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置ApiModel在实体类中不生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spring4all<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-swagger<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//我们需要构建一个代码生成器对象</span></span><br><span class="line">    AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">    <span class="comment">//怎么样去执行，配置策略</span></span><br><span class="line">    <span class="comment">//1、全局配置</span></span><br><span class="line">    GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">    String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);<span class="comment">//获取当前目录</span></span><br><span class="line">    gc.setOutputDir(projectPath+<span class="string">&quot;/src/main/java&quot;</span>);<span class="comment">//输出到哪个目录</span></span><br><span class="line">    gc.setAuthor(<span class="string">&quot;sx&quot;</span>);</span><br><span class="line">    gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">    gc.setFileOverride(<span class="keyword">false</span>);<span class="comment">//是否覆盖</span></span><br><span class="line">    gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);<span class="comment">//去Service的I前缀</span></span><br><span class="line">    gc.setIdType(IdType.ASSIGN_ID);</span><br><span class="line">    gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">    gc.setSwagger2(<span class="keyword">true</span>);</span><br><span class="line">    mpg.setGlobalConfig(gc);</span><br><span class="line">    <span class="comment">//2、设置数据源</span></span><br><span class="line">    DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">    dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/demo?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=GMT%2b8&quot;</span>);</span><br><span class="line">    dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    dsc.setDbType(DbType.MYSQL);</span><br><span class="line">    mpg.setDataSource(dsc);</span><br><span class="line">    <span class="comment">//3、包的配置</span></span><br><span class="line">    PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">    pc.setModuleName(<span class="string">&quot;study&quot;</span>);</span><br><span class="line">    pc.setParent(<span class="string">&quot;com.项目名&quot;</span>);</span><br><span class="line">    pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">    pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">    pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">    pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">    mpg.setPackageInfo(pc);</span><br><span class="line">    <span class="comment">//4、策略配置</span></span><br><span class="line">    StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">    strategy.setInclude(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;student&quot;</span>);<span class="comment">//设置要映射的表名,只需改这里即可</span></span><br><span class="line">    strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">    strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">    strategy.setEntityLombokModel(<span class="keyword">true</span>);<span class="comment">//是否使用lombok开启注解</span></span><br><span class="line">    strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">    <span class="comment">//自动填充配置</span></span><br><span class="line">    TableFill gmtCreate = <span class="keyword">new</span> TableFill(<span class="string">&quot;gmt_create&quot;</span>, FieldFill.INSERT);</span><br><span class="line">    TableFill gmtUpdate = <span class="keyword">new</span> TableFill(<span class="string">&quot;gmt_update&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">    ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    tableFills.add(gmtCreate);</span><br><span class="line">    tableFills.add(gmtUpdate);</span><br><span class="line">    strategy.setTableFillList(tableFills);</span><br><span class="line">    <span class="comment">//乐观锁配置</span></span><br><span class="line">    strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">    strategy.setRestControllerStyle(<span class="keyword">true</span>);<span class="comment">//开启驼峰命名</span></span><br><span class="line">    strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);<span class="comment">//localhost:8080/hello_id_2</span></span><br><span class="line">    mpg.setStrategy(strategy);</span><br><span class="line">    mpg.execute();<span class="comment">//执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="自动生成代码错误"><a href="#自动生成代码错误" class="headerlink" title="自动生成代码错误"></a>自动生成代码错误</h5><p><strong>依赖要导入全!</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自动生成代码 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--模板引擎 依赖:mybatis-plus代码生成的时候报异常--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置ApiModel在实体类中不生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spring4all<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-swagger<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>springboot启动类要加上注解！地址要对！</strong><br>@MapperScan(“mapper地址”)</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot笔记</title>
    <url>/2022/01/15/SpringBoot%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>😤！🤔🍑？⚡︎🌪🔪</p>
<p><strong>Springboot框架学习笔记</strong></p>
<ul>
<li>创建独立Spring应用、内嵌web服务器、自动starter依赖，简化构建配置、自动配置Spring以及第三方功能、提供生产级别的监控、健康检查及外部化配置、无代码生成、无需编写XML</li>
<li><a href="https://spring.io/projects/spring-boot">Spring Boot官网</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/">Spring Boot官方文档</a></li>
</ul>
<span id="more"></span>


    <div id="aplayer-cgsxmrMw" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="96520" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555" data-volume="0.1"
    ></div>

<h3 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h3><p>ctrl+shift+alt：多行操作<br>psvm：生成main()方法；<br>fori：生成for循环；<br>Ctrl+Alt+v：自动补齐返回值类型<br>ctrl+o：覆写方法<br>ctrl+i：实现接口中的方法<br>ctrl+shift+u：大小写转换<br>CTRL+SHIFT+Z：取消撤销<br>Alt＋Insert：生成构造方法、getter、setter<br>ctrl+y：删除当前行<br>Ctrl+Shift+J：将选中的行合并成一行<br>ctrl+g：定位到某一行<br>Ctrl+Shitft+向下箭头：将光标所在的代码块向下整体移动<br>Ctrl+Shift+向上箭头：将光标所在的代码块向上整体移动<br>Alt+Shift+向下箭头：将行向下移动<br>Alt+Shift+向上箭头：将行向上移动<br>Ctrl+F：在当前文件中查找<br>Ctrl+R：替换字符串<br>Ctrl+Shift+F:在全局文件中查找字符串<br>Ctrl+Shift+R：在全局中替换字符串<br>Ctrl+Shift+Enter：自动补齐{}或者分号;<br>Shift+Enter：在当前行的下方开始新行<br>Ctrl+Alt+Enter：在当前行的上方插入新行<br>Ctrl+Delete：删除光标所在至单词结尾处的所有字符</p>
<h3 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h3><p>idea中项目目录，如果文件被springboot识别，则文件图标右下角会有springboot的识别标记</p>
<p>application.yml与application.properties是springboot的配置文件，yaml优先级低于properties<br>properties：key=value<br>yaml：key: 空格 value</p>
<p>banner.txt是springboot启动的字符串，<a href="https://www.bootschool.net/ascii">在线生成器</a></p>
<p><code>@SpringBootApplication</code>标记这个类是一个springboot的应用，主要做了以下四件事情<br>1.推断应用的类型是普通项目还是Web项目<br>2.查找并加载所有可用初始化器，设置到initializers属性中<br>3.找出所有的应用程序监听器，设置到listeners属性中<br>4.推断并设置main方法的定义类，找到运行的主类</p>
<p><code>@Component</code>添加到spring组件里，注册bean</p>
<p><code>@ConfigurationProperties</code>：将配置文件中配置的每个属性的值，映射到这个组件中<br>告诉springboot将本类中所有属性和配置文件中相关的配置进行绑定<br>参数<code>prefix=&quot;person&quot;</code>：将配置文件中的person下面的所有属性一一对应</p>
<p>springboot主配置优先级：项目路径下config&gt;项目路径&gt;资源路径下config&gt;资源路径</p>
<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/2BGWl1qPxib1Id9lfLbDPG8Qbc5RVwMpMiabGNIxCoHWt6CAHSmGxXDlDfznAJ7T3xHK3dgXdzMGWSgfCeYRIYicw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result&lt;&gt;();</span><br><span class="line">        result.setCode(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        result.setMsg(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">success</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> Result&lt;&gt;(data);</span><br><span class="line">        result.setCode(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        result.setMsg(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">error</span><span class="params">(String code, String msg)</span> </span>&#123;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result();</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="层级理解"><a href="#层级理解" class="headerlink" title="层级理解"></a>层级理解</h3><h5 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h5><p>持久层，主要与数据库交互</p>
<p>DAO层首先会创建Dao接口，接着就可以在配置文件中定义该接口的实现类；接着就可以在模块中调用Dao的接口进行数据业务的处理，而不用关注此接口的具体实现类是哪一个类，Dao层的数据源和数据库连接的参数都是在配置文件中进行配置的。</p>
<p><code>@Repository</code></p>
<h5 id="Entity层"><a href="#Entity层" class="headerlink" title="Entity层"></a>Entity层</h5><p>实体层，数据库在项目中的类</p>
<p>主要用于定义与数据库对象应的属性，提供get/set方法,tostring方法,有参无参构造函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class="line"><span class="meta">@Table(name = &quot;tbl_user&quot;)</span> <span class="comment">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> <span class="comment">//这是一个主键</span></span><br><span class="line"><span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><span class="comment">//自增主键</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="meta">@Column(name = &quot;last_name&quot;,length = 50)</span> <span class="comment">//这是和数据表对应的一个列</span></span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="meta">@Column</span> <span class="comment">//省略默认列名就是属性名</span></span><br><span class="line"><span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure>

<h5 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h5><p>控制层 控制业务逻辑</p>
<p>具体的业务模块流程的控制，controller层主要调用Service层里面的接口控制具体的业务流程，控制的配置也要在配置文件中进行。</p>
<p><code>@RestController</code>结合了<code>@Controller</code>和<code>@ResponseBody</code>，表示这个接口里面所有的方法都返回json数据，<code>@RequestBody</code>用来转化json数据为java对象，<code>@RequestBody</code>用于从前端接收json数据，转换为查询对象并传递到接口执行查询；<code>@ReponseBody</code>为后端向前端返回json数据</p>
<h5 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h5><p>业务层 控制业务</p>
<p><code>@Service</code></p>
<p>业务模块的逻辑应用设计，和DAO层一样都是先设计接口，再创建要实现的类，然后在配置文件中进行配置其实现的关联。接下来就可以在service层调用接口进行业务逻辑应用的处理。</p>
<p>好处：封装Service层的业务逻辑有利于业务逻辑的独立性和重复利用性。</p>
<p>Controller和Service的区别是：Controller负责具体的业务模块流程的控制；Service层负责业务模块的逻辑应用设计</p>
<p>具体的一个项目中有：controller层调用了Service层的方法，Service层调用Dao层的方法，其中调用的参数是使用Entity层进行传递的。</p>
<h3 id="网页跳转"><a href="#网页跳转" class="headerlink" title="网页跳转"></a>网页跳转</h3><p>引入thymeleaf依赖<br>prefix = “spring.thymeleaf”<br>默认路径<code>&quot;classpath:/templates/&quot;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入依赖</span></span><br><span class="line">&lt;!--thymeleaf模板jar，是很不错的html数据传递取值，类似jsp的jstl--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"><span class="comment">//controller实现</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test_01</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/o&quot;)</span><span class="comment">//url地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;op&quot;</span>; <span class="comment">//默认后缀.html，只需要写文件名就可以</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><h5 id="idea中-Table注解报错"><a href="#idea中-Table注解报错" class="headerlink" title="idea中@Table注解报错"></a>idea中@Table注解报错</h5><p>can not resolve table</p>
<p>在idea中创建实体类使用@Table注解时，@Table(name=“user”)一直报错，提示 can not resolve table ‘user’，如果不在idea中连接数据库，那么就会出现这个情况，虽然不影响最后的运行结果，但是飘红真的看着很不舒服。</p>
<p>点击最右边的竖着的Database选项卡，弹出这个页面，点击上面的+号，选择Data Source，然后根据自己的情况选择要连接的数据库，我使用mysql，所以选择mysql</p>
<p><img src="https://img-blog.csdnimg.cn/2020031716281549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTk1Nzc4,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20200317163119285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTk1Nzc4,size_16,color_FFFFFF,t_70"></p>
<p>根据情况填写host，然后填写用户名和密码即可，点击测试连接，如果没有驱动会提示让你下载驱动，很快的，不耽搁。但是，如果驱动下载完毕后，测试连接出现<br>Server returns invalid timezone. Go to ‘Advanced’ tab and set ‘serverTimezon’<br>说明是你的时区有问题，我知道你们有人要直接在url地址栏中自己拼时区了，不用试了我已经帮你们试过了，没法<br>下面说怎么解决。Win+R进cmd连上数据库后，复制以下指令，记住后面有个分号别忘了<br>show variables like “%time_zone%”;<br>然后继续，记住分号别忘了<br>set global time_zone = ‘+8:00’;<br>ps:这个是一次性的，关机或者重启mysql服务，这个设置就会失效，如果要永久修改时区，在my.ini中添加<br>default-time-zone=’+08:00’</p>
<p>注意一定要在 [mysqld] 之下加 ，否则会出现 unknown variable ‘default-time-zone=+8:00’</p>
<p>然后重启mysql服务即可</p>
<p>返回你的实体类，发现还是报错，需要分配数据源</p>
<p><img src="https://img-blog.csdnimg.cn/20200317164045712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTk1Nzc4,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20200317164231993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTk1Nzc4,size_16,color_FFFFFF,t_70"></p>
<p><img src="D:\blog\blog\source\image\watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTk1Nzc4,size_16,color_FFFFFF,t_70.png"></p>
<p>在右边的Data Source中，选择关联的mysql，点击ok，回来在看，飘红解决，其实飘红也无所谓的，不影响运行结果，前提是写对字段和表名了。</p>
<h3 id="JSR-303-校验"><a href="#JSR-303-校验" class="headerlink" title="JSR 303 校验"></a>JSR 303 校验</h3><p>在类启动注解<code>@Validated</code>，在类数据上使用jsr303注解进行校验，<code>message = &quot;错误！&quot;</code>都有message参数，用来提示错误，如果校验成果不匹配，则会报错。</p>
<p>@validted需要hibernate-validator，jsr303注解需要jakarta.validation-api</p>
<h5 id="JSR-303-基本的校验规则"><a href="#JSR-303-基本的校验规则" class="headerlink" title="JSR 303 基本的校验规则"></a>JSR 303 基本的校验规则</h5><p>@Null 验证对象是否为null<br>@NotNull 验证对象是否不为null, 无法查检长度为0的字符串<br>@NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.<br>@NotEmpty 检查约束元素是否为NULL或者是EMPTY.</p>
<p>Booelan检查<br>@AssertTrue 验证 Boolean 对象是否为 true<br>@AssertFalse 验证 Boolean 对象是否为 false</p>
<p>长度检查<br>@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内<br>@Length(min=, max=) Validates that the annotated string is between min and max included.</p>
<p>日期检查<br>@Past 验证 Date 和 Calendar 对象是否在当前时间之前，验证成立的话被注释的元素一定是一个过去的日期<br>@Future 验证 Date 和 Calendar 对象是否在当前时间之后 ，验证成立的话被注释的元素一定是一个将来的日期 </p>
<p>正则表达式<br>@Pattern 验证 String 对象是否符合正则表达式的规则，被注释的元素符合制定的正则表达式，regexp:正则表达式 flags: 指定 Pattern.Flag 的数组，表示正则表达式的相关选项。</p>
<p>数值检查<br>建议使用在Stirng,Integer类型，不建议使用在int类型上，因为表单值为“”时无法转换为int，但可以转换为Stirng为”“,Integer为null<br>@Min 验证 Number 和 String 对象是否大等于指定的值<br>@Max 验证 Number 和 String 对象是否小等于指定的值<br>@DecimalMax 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度<br>@DecimalMin 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度<br>@Digits 验证 Number 和 String 的构成是否合法<br>@Digits(integer=,fraction=) 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。<br>@Range(min=, max=) 被指定的元素必须在合适的范围内<br>@Range(min=10000,max=50000,message=”range.bean.wage”)<br>@Valid 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)<br>@CreditCardNumber信用卡验证<br>@Email 验证是否是邮件地址，如果为null,不进行验证，算通过验证。<br>@ScriptAssert(lang= ,script=, alias=)<br>@URL(protocol=,host=, port=,regexp=, flags=)</p>
<p>@Validated： 用在方法入参上无法单独提供嵌套验证功能。不能用在成员属性（字段）上，也无法提示框架进行嵌套验证。能配合嵌套验证注解@Valid进行嵌套验证。</p>
<p>@Valid： 用在方法入参上无法单独提供嵌套验证功能。能够用在成员属性（字段）上，提示验证框架进行嵌套验证。能配合嵌套验证注解@Valid进行嵌套验证</p>
<h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><p><strong>根据当前不同的条件判断，决定这个配置类是否生效</strong></p>
<ul>
<li>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</li>
<li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</li>
<li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</li>
<li>配置文件能配置什么就可以参照某个功能对应的这个属性类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1、SpringBoot启动会加载大量的自动配置类<br>2、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；<br>3、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）<br>4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；<br><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件<br><strong>xxxxProperties:封装配置文件中相关属性；</strong></p>
<h5 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h5><p><strong>自动配置类必须在一定的条件下才能生效；</strong><br><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong><br>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>
<p><img src="https://img2020.cnblogs.com/i-beta/1418974/202003/1418974-20200312125749368-824052257.png"></p>
<p><strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span></span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//启动指定类的ConfigurationProperties功能；</span></span><br><span class="line">  <span class="comment">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span></span><br><span class="line">  <span class="comment">//并把HttpProperties加入到ioc容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;HttpProperties.class&#125;)</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//Spring底层@Conditional注解</span></span><br><span class="line">  <span class="comment">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span></span><br><span class="line">  <span class="comment">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span></span><br><span class="line">  <span class="comment">//如果不存在，判断也是成立的</span></span><br><span class="line">  <span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.http.encoding&quot;,</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class="line"><span class="meta">    matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line">    <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//。。。。。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong><br>我们怎么知道哪些自动配置类生效？<br>我们可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启springboot的调试类</span></span><br><span class="line">debug=<span class="keyword">true</span></span><br><span class="line"><span class="comment">//启动springboot时，会在控制台打印自动配置报告</span></span><br></pre></td></tr></table></figure>

<p>Positive matches:（自动配置类启用的：正匹配）<br>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）<br>Unconditional classes: （没有条件的类）<br>did not match：说明类没有生效</p>
<h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="web-静态资源"><a href="#web-静态资源" class="headerlink" title="web-静态资源"></a>web-静态资源</h4><p>静态资源默认访问路径在static文件夹下，可通过下面指令更改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  web:</span><br><span class="line">    resources:</span><br><span class="line">      static-locations: classpath:/image/</span><br></pre></td></tr></table></figure>

<p>index.html为默认主界面</p>
<p>favicon.ico为默认网页图标</p>
<p>如若更改后没有效果，可以清理浏览器缓存或重启idea</p>
<h4 id="web-静态资源原理"><a href="#web-静态资源原理" class="headerlink" title="web-静态资源原理"></a>web-静态资源原理</h4><ul>
<li><p>SpringBoot启动默认加载 xxxAutoConfiguration 类（自动配置类）</p>
</li>
<li><p>SpringMVC功能的自动配置类<code>WebMvcAutoConfiguration</code>，生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration(proxyBeanMethods = false)</span><br><span class="line">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="line">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="line">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="line">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="line">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="line">		ValidationAutoConfiguration.class &#125;)</span><br><span class="line">public class WebMvcAutoConfiguration &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给容器中配置的内容：</p>
<ul>
<li><p>配置文件的相关属性的绑定：WebMvcProperties==<strong>spring.mvc</strong>、ResourceProperties==<strong>spring.resources</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration(proxyBeanMethods = false)</span><br><span class="line">@Import(EnableWebMvcConfiguration.class)</span><br><span class="line">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span><br><span class="line">@Order(0)</span><br><span class="line">public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="RestTemplate-htpp请求"><a href="#RestTemplate-htpp请求" class="headerlink" title="RestTemplate htpp请求"></a>RestTemplate htpp请求</h3><p><a href="https://blog.csdn.net/likun557/article/details/121072832?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164282205316780261949687%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164282205316780261949687&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121072832.first_rank_v2_pc_rank_v29&utm_term=RestTemplate&spm=1018.2226.3001.4187">一文吃透接口调用神器RestTemplate</a></p>
<p><a href="https://www.cnblogs.com/hujunwei/p/11295787.html">springboot发送http请求</a></p>
<p>目标：发送Http请求</p>
<p>实现步骤：</p>
<p>\1. 创建一个springboot的工程</p>
<p>\2. 配置RestTemplate的对象Bean到Spring容器中</p>
<p>\3. 在测试类中用@Autowired注入Spring容器中的RestTemplate对象</p>
<p>\4. 通过RestTemplate对象的getForObject发送请求</p>
<p>\5. 运行测试类的测试方法</p>
<p><strong>在项目启动类位置中注册一个RestTemplate对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以不用注解，直接new个RestTemplate对象</span></span><br><span class="line">RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br></pre></td></tr></table></figure>

<p><strong>在测试类ApplicationTests中 @Autowired 注入RestTemplate</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//RestTemplate restTemplate = new RestTemplate();</span></span><br><span class="line">        String url = <span class="string">&quot;https://shengapi.cn/api/tq.php?msg=聊城&amp;n=1&quot;</span>;</span><br><span class="line">        String json = restTemplate.getForObject(url, String.class);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="RestTemplate-概述"><a href="#RestTemplate-概述" class="headerlink" title="RestTemplate 概述"></a>RestTemplate 概述</h4><p>发送 http 请求，估计很多人用过 httpclient 和 okhttp，确实挺好用的，而 Spring web 中的 RestTemplate 和这俩的功能类似，也是用来发送 http 请求的，不过用法上面比前面的 2 位要容易很多。</p>
<p>spring 框架提供的 RestTemplate 类可用于在应用中调用 rest 服务，它简化了与 http 服务的通信方式，统一了 RESTful 的标准，封装了 http 链接， 我们只需要传入 url 及返回值类型即可。相较于之前常用的 HttpClient，RestTemplate 是一种更优雅的调用 RESTful 服务的方式。</p>
<p>在 Spring 应用程序中访问第三方 REST 服务与使用 Spring RestTemplate 类有关。RestTemplate 类的设计原则与许多其他 Spring 模板类(例如 JdbcTemplate、JmsTemplate)相同，为执行复杂任务提供了一种具有默认行为的简化方法。</p>
<p>RestTemplate 默认依赖 JDK 提供 http 连接的能力（HttpURLConnection），如果有需要的话也可以通过 setRequestFactory 方法替换为例如 Apache HttpComponents、Netty 或 OkHttp 等其它 HTTP library。</p>
<p>考虑到 RestTemplate 类是为调用 REST 服务而设计的，因此它的主要方法与 REST 的基础紧密相连就不足为奇了，后者是 HTTP 协议的方法:HEAD、GET、POST、PUT、DELETE 和 OPTIONS。例如，RestTemplate 类具有 headForHeaders()、getForObject()、postForObject()、put()和 delete()等方法。</p>
<h4 id="发送Get请求"><a href="#发送Get请求" class="headerlink" title="发送Get请求"></a>发送Get请求</h4><h5 id="普通请求"><a href="#普通请求" class="headerlink" title="普通请求"></a>普通请求</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口代码</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">index</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/springboot/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">String <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法1</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8888/springboot/say&quot;</span>;</span><br><span class="line">    String json = restTemplate.getForObject(url, String.class);</span><br><span class="line">    System.out.println(json);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法2</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8888/springboot/say&quot;</span>;</span><br><span class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(url, String.class);</span><br><span class="line">    System.out.println(responseEntity.getStatusCode());</span><br><span class="line">    <span class="comment">//获取头</span></span><br><span class="line">    System.out.println(<span class="string">&quot;头：&quot;</span> + responseEntity.getHeaders());</span><br><span class="line">    <span class="comment">//获取body</span></span><br><span class="line">    String json = responseEntity.getBody();</span><br><span class="line">    System.out.println(json);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法1输出</span></span><br><span class="line">Hello,springboot</span><br><span class="line"><span class="comment">//写法2输出</span></span><br><span class="line"><span class="number">200</span> OK</span><br><span class="line">头：[Content-Type:<span class="string">&quot;text/plain;charset=UTF-8&quot;</span>, Content-Length:<span class="string">&quot;16&quot;</span>, Date:<span class="string">&quot;Sat, 22 Jan 2022 03:59:28 GMT&quot;</span>, Keep-Alive:<span class="string">&quot;timeout=60&quot;</span>, Connection:<span class="string">&quot;keep-alive&quot;</span>]</span><br><span class="line">Hello,springboot</span><br></pre></td></tr></table></figure>

<h5 id="含有动态参数"><a href="#含有动态参数" class="headerlink" title="含有动态参数"></a>含有动态参数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口代码</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/test/get/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BookDto <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, <span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BookDto(id, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法1</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    <span class="comment">//url中有动态参数</span></span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8080/chat16/test/get/&#123;id&#125;/&#123;name&#125;&quot;</span>;</span><br><span class="line">    Map&lt;String, String&gt; uriVariables = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    uriVariables.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    uriVariables.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;SpringMVC系列&quot;</span>);</span><br><span class="line">    <span class="comment">//使用getForObject或者getForEntity方法</span></span><br><span class="line">    BookDto bookDto = restTemplate.getForObject(url, BookDto.class, uriVariables);</span><br><span class="line">    System.out.println(bookDto);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法2</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    <span class="comment">//url中有动态参数</span></span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8080/chat16/test/get/&#123;id&#125;/&#123;name&#125;&quot;</span>;</span><br><span class="line">    Map&lt;String, String&gt; uriVariables = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    uriVariables.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    uriVariables.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;SpringMVC系列&quot;</span>);</span><br><span class="line">    <span class="comment">//getForEntity方法</span></span><br><span class="line">    ResponseEntity&lt;BookDto&gt; responseEntity = restTemplate.getForEntity(url, BookDto.class, uriVariables);</span><br><span class="line">    BookDto bookDto = responseEntity.getBody();</span><br><span class="line">    System.out.println(bookDto);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">BookDto&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;SpringMVC系列&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h5 id="接口返回值为泛型"><a href="#接口返回值为泛型" class="headerlink" title="接口返回值为泛型"></a>接口返回值为泛型</h5><p>当接口的返回值为泛型的时候，这种情况比较特殊，使用 RestTemplate 调用上面这个接口，代码如下，需要用到<code>==restTemplate.exchange==</code>的方法，这个方法中有个参数是<code>==ParameterizedTypeReference==</code>类型，通过这个参数类指定泛型类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口代码</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/test/getList&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;BookDto&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> BookDto(<span class="number">1</span>, <span class="string">&quot;Spring高手系列&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> BookDto(<span class="number">2</span>, <span class="string">&quot;SpringMVC系列&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    <span class="comment">//返回值为泛型</span></span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8080/chat16/test/getList&quot;</span>;</span><br><span class="line">    <span class="comment">//若返回结果是泛型类型的，需要使用到exchange方法，</span></span><br><span class="line">    <span class="comment">//这个方法中有个参数是ParameterizedTypeReference类型，通过这个参数类指定泛型类型</span></span><br><span class="line">    ResponseEntity&lt;List&lt;BookDto&gt;&gt; responseEntity =</span><br><span class="line">            restTemplate.exchange(url,</span><br><span class="line">                    HttpMethod.GET,</span><br><span class="line">                    <span class="keyword">null</span>,</span><br><span class="line">                    <span class="keyword">new</span> ParameterizedTypeReference&lt;List&lt;BookDto&gt;&gt;() &#123;</span><br><span class="line">                    &#125;);</span><br><span class="line">    List&lt;BookDto&gt; bookDtoList = responseEntity.getBody();</span><br><span class="line">    System.out.println(bookDtoList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">[BookDto&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;Spring高手系列&#x27;</span>&#125;, BookDto&#123;id=<span class="number">2</span>, name=<span class="string">&#x27;SpringMVC系列&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure>

<h5 id="下载小文件"><a href="#下载小文件" class="headerlink" title="下载小文件"></a>下载小文件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口代码</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/test/downFile&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpEntity&lt;InputStreamResource&gt; <span class="title">downFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将文件流封装为InputStreamResource对象</span></span><br><span class="line">    InputStream inputStream = <span class="keyword">this</span>.getClass().getResourceAsStream(<span class="string">&quot;/1.txt&quot;</span>);</span><br><span class="line">    InputStreamResource inputStreamResource = <span class="keyword">new</span> InputStreamResource(inputStream);</span><br><span class="line">    <span class="comment">//设置header</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.add(HttpHeaders.CONTENT_DISPOSITION, <span class="string">&quot;attachment;filename=1.txt&quot;</span>);</span><br><span class="line">    HttpEntity&lt;InputStreamResource&gt; httpEntity = <span class="keyword">new</span> HttpEntity&lt;&gt;(inputStreamResource);</span><br><span class="line">    <span class="keyword">return</span> httpEntity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8080/chat16/test/downFile&quot;</span>;</span><br><span class="line">    <span class="comment">//文件比较小的情况，直接返回字节数组</span></span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; responseEntity = restTemplate.getForEntity(url, <span class="keyword">byte</span>[].class);</span><br><span class="line">    <span class="comment">//获取文件的内容</span></span><br><span class="line">    <span class="keyword">byte</span>[] body = responseEntity.getBody();</span><br><span class="line">    String content = <span class="keyword">new</span> String(body);</span><br><span class="line">    System.out.println(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果文件大的时候，这种方式就有问题了，会导致 oom，要用下面的方式了</p>
<h5 id="下载大文件"><a href="#下载大文件" class="headerlink" title="下载大文件"></a>下载大文件</h5><p>文件比较大的时候，比如好几个 G，就不能返回字节数组了，会把内存撑爆，导致 OOM，需要使用 execute 方法了，这个方法中有个 ResponseExtractor 类型的参数，restTemplate 拿到结果之后，会回调{@link ResponseExtractor#extractData}这个方法，在这个方法中可以拿到响应流，然后进行处理，这个过程就是变读边处理，不会导致内存溢出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8080/chat16/test/downFile&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件比较大的时候，比如好几个G，就不能返回字节数组了，会把内存撑爆，导致OOM</span></span><br><span class="line"><span class="comment">     * 需要这么玩：</span></span><br><span class="line"><span class="comment">     * 需要使用execute方法了，这个方法中有个ResponseExtractor类型的参数，</span></span><br><span class="line"><span class="comment">     * restTemplate拿到结果之后，会回调&#123;<span class="doctag">@link</span> ResponseExtractor#extractData&#125;这个方法，</span></span><br><span class="line"><span class="comment">     * 在这个方法中可以拿到响应流，然后进行处理，这个过程就是变读边处理，不会导致内存溢出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String result = restTemplate.execute(url,</span><br><span class="line">            HttpMethod.GET,</span><br><span class="line">            <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">new</span> ResponseExtractor&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">extractData</span><span class="params">(ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;状态：&quot;</span>+response.getStatusCode());</span><br><span class="line">                    System.out.println(<span class="string">&quot;头：&quot;</span>+response.getHeaders());</span><br><span class="line">                    <span class="comment">//获取响应体流</span></span><br><span class="line">                    InputStream body = response.getBody();</span><br><span class="line">                    <span class="comment">//处理响应体流</span></span><br><span class="line">                    String content = IOUtils.toString(body, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> content;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><h5 id="post请求类型"><a href="#post请求类型" class="headerlink" title="post请求类型"></a>post请求类型</h5><table>
<thead>
<tr>
<th>Content-Type</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>application/x-www-form-urlencoded</td>
<td>页面中普通的 form 表单提交时就是这种类型，表单中的元素会按照名称和值拼接好，然后之间用&amp;连接，格式如：p1=v1&amp;p2=v2&amp;p3=v3<br/>然后通过 urlencoded 编码之后丢在 body 中发送</td>
</tr>
<tr>
<td>multipart/form-data</td>
<td>页面中表单上传文件的时候，用到的就是这种格式</td>
</tr>
<tr>
<td>application/json</td>
<td>将发送的数据转换为 json 格式，丢在 http 请求的 body 中发送，后端接口通常用@RequestBody 配合对象来接收</td>
</tr>
</tbody></table>
<h5 id="普通表单请求"><a href="#普通表单请求" class="headerlink" title="普通表单请求"></a>普通表单请求</h5><p>普通表单默认为 application/x-www-form-urlencoded 类型的请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口代码</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/test/form1&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BookDto <span class="title">form1</span><span class="params">(BookDto bookDto)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bookDto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8080/chat16/test/form1&quot;</span>;</span><br><span class="line">    <span class="comment">//①：表单信息，需要放在MultiValueMap中，MultiValueMap相当于Map&lt;String,List&lt;String&gt;&gt;</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; body = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//调用add方法填充表单数据(表单名称:值)</span></span><br><span class="line">    body.add(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    body.add(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;SpringMVC系列&quot;</span>);</span><br><span class="line">    <span class="comment">//②：发送请求(url,请求体，返回值需要转换的类型)</span></span><br><span class="line">    BookDto result = restTemplate.postForObject(url, body, BookDto.class);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果想携带头信息，写法如下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8080/chat16/test/form1&quot;</span>;</span><br><span class="line">    <span class="comment">//①：表单信息，需要放在MultiValueMap中，MultiValueMap相当于Map&lt;String,List&lt;String&gt;&gt;</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; body = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//调用add方法放入表单元素(表单名称:值)</span></span><br><span class="line">    body.add(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    body.add(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;SpringMVC系列&quot;</span>);</span><br><span class="line">    <span class="comment">//②：请求头</span></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    <span class="comment">//调用set方法放入请求头</span></span><br><span class="line">    headers.set(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED_VALUE);</span><br><span class="line">    <span class="comment">//③：请求实体：包含了请求体和请求头</span></span><br><span class="line">    HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; httpEntity = <span class="keyword">new</span> HttpEntity&lt;&gt;(body, headers);</span><br><span class="line">    <span class="comment">//④：发送请求(url,请求实体，返回值需要转换的类型)</span></span><br><span class="line">    BookDto result = restTemplate.postForObject(url, httpEntity, BookDto.class);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="上传本地文件"><a href="#上传本地文件" class="headerlink" title="上传本地文件"></a>上传本地文件</h5><p>上传文件 Content-Type 为 multipart/form-data 类型</p>
<p>使用 RestTemplate 调用接口，主要下面代码②上传的文件需要包装为org.springframework.core.io.Resource，常用的有 3 中[FileSystemResource、InputStreamResource、ByteArrayResource]，这里案例中我们用到的是 FileSystemResource 来上传本地文件，另外 2 种（InputStreamResource、ByteArrayResource）用法就比较特殊了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口代码</span></span><br><span class="line"><span class="comment">//上传上传单个文件，返回值为一个 Map 类型，是泛型类型</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/test/form2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">form2</span><span class="params">(<span class="meta">@RequestParam(&quot;file1&quot;)</span> MultipartFile file1)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; fileMetadata = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    fileMetadata.put(<span class="string">&quot;文件名&quot;</span>, file1.getOriginalFilename());</span><br><span class="line">    fileMetadata.put(<span class="string">&quot;文件类型&quot;</span>, file1.getContentType());</span><br><span class="line">    fileMetadata.put(<span class="string">&quot;文件大小(byte)&quot;</span>, String.valueOf(file1.getSize()));</span><br><span class="line">    <span class="keyword">return</span> fileMetadata;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test12</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8080/chat16/test/form2&quot;</span>;</span><br><span class="line">    <span class="comment">//①：表单信息，需要放在MultiValueMap中，MultiValueMap相当于Map&lt;String,List&lt;String&gt;&gt;</span></span><br><span class="line">    MultiValueMap&lt;String, Object&gt; body = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//调用add方法放入表单元素(表单名称:值)</span></span><br><span class="line">    <span class="comment">//②：文件对应的类型，需要是org.springframework.core.io.Resource类型的，常见的有[FileSystemResource、InputStreamResource、ByteArrayResource]</span></span><br><span class="line">    body.add(<span class="string">&quot;file1&quot;</span>, <span class="keyword">new</span> FileSystemResource(<span class="string">&quot;.\\src\\main\\java\\com\\javacode2018\\springmvc\\chat16\\dto\\UserDto.java&quot;</span>));</span><br><span class="line">    <span class="comment">//③：头</span></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.add(<span class="string">&quot;header1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    headers.add(<span class="string">&quot;header2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    <span class="comment">//④：请求实体</span></span><br><span class="line">    RequestEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; requestEntity = <span class="keyword">new</span> RequestEntity&lt;&gt;(body, headers, HttpMethod.POST, URI.create(url));</span><br><span class="line">    <span class="comment">//⑤：发送请求(请求实体，返回值需要转换的类型)</span></span><br><span class="line">    ResponseEntity&lt;Map&lt;String, String&gt;&gt; responseEntity = restTemplate.exchange(</span><br><span class="line">        requestEntity,</span><br><span class="line">        <span class="keyword">new</span> ParameterizedTypeReference&lt;Map&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    Map&lt;String, String&gt; result = responseEntity.getBody();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="复杂表单"><a href="#复杂表单" class="headerlink" title="复杂表单"></a>复杂表单</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口代码</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/test/form3&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">form3</span><span class="params">(UserDto userDto)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; result = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    result.put(<span class="string">&quot;name&quot;</span>, userDto.getName());</span><br><span class="line">    result.put(<span class="string">&quot;headImg&quot;</span>, userDto.getHeadImg().getOriginalFilename());</span><br><span class="line">    result.put(<span class="string">&quot;idImgList&quot;</span>, Arrays.toString(userDto.getIdImgList().stream().</span><br><span class="line">                                            map(MultipartFile::getOriginalFilename).toArray()));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserDto：包含了多个元素（姓名、头像、多张证件照），这种可以模拟复杂的表单</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDto</span> </span>&#123;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//头像</span></span><br><span class="line">    <span class="keyword">private</span> MultipartFile headImg;</span><br><span class="line">    <span class="comment">//多张证件照</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;MultipartFile&gt; idImgList;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//get set 省略了...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test14</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8080/chat16/test/form3&quot;</span>;</span><br><span class="line">    <span class="comment">//①：表单信息，需要放在MultiValueMap中，MultiValueMap相当于Map&lt;String,List&lt;String&gt;&gt;</span></span><br><span class="line">    MultiValueMap&lt;String, Object&gt; body = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">    body.add(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;路人&quot;</span>);</span><br><span class="line">    body.add(<span class="string">&quot;headImg&quot;</span>, <span class="keyword">new</span> FileSystemResource(<span class="string">&quot;.\\src\\main\\resources\\1.jpg&quot;</span>));</span><br><span class="line">    <span class="comment">//来2张证件照，元素名称一样</span></span><br><span class="line">    body.add(<span class="string">&quot;idImgList&quot;</span>, <span class="keyword">new</span> FileSystemResource(<span class="string">&quot;.\\src\\main\\resources\\2.jpg&quot;</span>));</span><br><span class="line">    body.add(<span class="string">&quot;idImgList&quot;</span>, <span class="keyword">new</span> FileSystemResource(<span class="string">&quot;.\\src\\main\\resources\\3.jpg&quot;</span>));</span><br><span class="line">    <span class="comment">//③：头</span></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.add(<span class="string">&quot;header1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    headers.add(<span class="string">&quot;header2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    <span class="comment">//④：请求实体</span></span><br><span class="line">    RequestEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; requestEntity = <span class="keyword">new</span> RequestEntity&lt;&gt;(body, headers, HttpMethod.POST, URI.create(url));</span><br><span class="line">    <span class="comment">//⑤：发送请求(请求实体，返回值需要转换的类型)</span></span><br><span class="line">    ResponseEntity&lt;Map&lt;String, String&gt;&gt; responseEntity = restTemplate.exchange(</span><br><span class="line">            requestEntity,</span><br><span class="line">            <span class="keyword">new</span> ParameterizedTypeReference&lt;Map&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">    Map&lt;String, String&gt; result = responseEntity.getBody();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">&#123;name=路人, headImg=<span class="number">1.</span>jpg, idImgList=[<span class="number">2.</span>jpg, <span class="number">3.</span>jpg]&#125;</span><br></pre></td></tr></table></figure>

<h5 id="发送-json-格式数据：传递-java-对象"><a href="#发送-json-格式数据：传递-java-对象" class="headerlink" title="发送 json 格式数据：传递 java 对象"></a>发送 json 格式数据：传递 java 对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/test/form4&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BookDto <span class="title">form4</span><span class="params">(<span class="meta">@RequestBody</span> BookDto bookDto)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bookDto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test15</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8080/chat16/test/form4&quot;</span>;</span><br><span class="line">    BookDto body = <span class="keyword">new</span> BookDto(<span class="number">1</span>, <span class="string">&quot;SpringMVC系列&quot;</span>);</span><br><span class="line">    BookDto result = restTemplate.postForObject(url, body, BookDto.class);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">BookDto&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;SpringMVC系列&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h5 id="发送-json-格式数据：传递-java-对象，返回值为泛型"><a href="#发送-json-格式数据：传递-java-对象，返回值为泛型" class="headerlink" title="发送 json 格式数据：传递 java 对象，返回值为泛型"></a>发送 json 格式数据：传递 java 对象，返回值为泛型</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/test/form5&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;BookDto&gt; <span class="title">form5</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;BookDto&gt; bookDtoList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bookDtoList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test16</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8080/chat16/test/form5&quot;</span>;</span><br><span class="line">    <span class="comment">//①：请求体，发送的时候会被转换为json格式数据</span></span><br><span class="line">    List&lt;BookDto&gt; body = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> BookDto(<span class="number">1</span>, <span class="string">&quot;SpringMVC系列&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> BookDto(<span class="number">2</span>, <span class="string">&quot;MySQL系列&quot;</span>));</span><br><span class="line">    <span class="comment">//②：头</span></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.add(<span class="string">&quot;header1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    headers.add(<span class="string">&quot;header2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    <span class="comment">//③：请求实体</span></span><br><span class="line">    RequestEntity requestEntity = <span class="keyword">new</span> RequestEntity(body, headers, HttpMethod.POST, URI.create(url));</span><br><span class="line">    <span class="comment">//④：发送请求(请求实体，返回值需要转换的类型)</span></span><br><span class="line">    ResponseEntity&lt;List&lt;BookDto&gt;&gt; responseEntity = restTemplate.exchange(</span><br><span class="line">            requestEntity,</span><br><span class="line">            <span class="keyword">new</span> ParameterizedTypeReference&lt;List&lt;BookDto&gt;&gt;() &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="comment">//⑤：获取结果</span></span><br><span class="line">    List&lt;BookDto&gt; result = responseEntity.getBody();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[BookDto&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;SpringMVC系列&#x27;</span>&#125;, BookDto&#123;id=<span class="number">2</span>, name=<span class="string">&#x27;MySQL系列&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure>

<h5 id="发送-json-字符串格式数据"><a href="#发送-json-字符串格式数据" class="headerlink" title="发送 json 字符串格式数据"></a>发送 json 字符串格式数据</h5><p>上面 2 个 json 案例 body 都是 java 对象，RestTemplate 默认自动配上 Content-Type=application/json</p>
<p>但是如果 body 的值是 json 格式字符串的时候，调用的时候需要在头中明确指定 Content-Type=application/json，写法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test17</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    String url = <span class="string">&quot;http://localhost:8080/chat16/test/form5&quot;</span>;</span><br><span class="line">    <span class="comment">//①：请求体为一个json格式的字符串</span></span><br><span class="line">    String body = <span class="string">&quot;[&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;SpringMVC系列\&quot;&#125;,&#123;\&quot;id\&quot;:2,\&quot;name\&quot;:\&quot;MySQL系列\&quot;&#125;]&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ②：若请求体为json字符串的时候，需要在头中设置Content-Type=application/json；</span></span><br><span class="line"><span class="comment">     * 若body是普通的java类的时候，无需指定这个，RestTemplate默认自动配上Content-Type=application/json</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">    <span class="comment">//③：请求实体（body，头、请求方式，uri）</span></span><br><span class="line">    RequestEntity requestEntity = <span class="keyword">new</span> RequestEntity(body, headers, HttpMethod.POST, URI.create(url));</span><br><span class="line">    <span class="comment">//④：发送请求(请求实体，返回值需要转换的类型)</span></span><br><span class="line">    ResponseEntity&lt;List&lt;BookDto&gt;&gt; responseEntity = restTemplate.exchange(</span><br><span class="line">            requestEntity,</span><br><span class="line">            <span class="keyword">new</span> ParameterizedTypeReference&lt;List&lt;BookDto&gt;&gt;() &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="comment">//⑤：获取结果</span></span><br><span class="line">    List&lt;BookDto&gt; result = responseEntity.getBody();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[BookDto&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;SpringMVC系列&#x27;</span>&#125;, BookDto&#123;id=<span class="number">2</span>, name=<span class="string">&#x27;MySQL系列&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure>

<h4 id="DELETE、PUT、OPTION-请求"><a href="#DELETE、PUT、OPTION-请求" class="headerlink" title="DELETE、PUT、OPTION 请求"></a>DELETE、PUT、OPTION 请求</h4><h5 id="DELETE-请求"><a href="#DELETE-请求" class="headerlink" title="DELETE 请求"></a>DELETE 请求</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String url, Object... uriVariables)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String url, Map&lt;String, ?&gt; uriVariables)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(URI url)</span></span>;</span><br></pre></td></tr></table></figure>

<h5 id="PUT-请求"><a href="#PUT-请求" class="headerlink" title="PUT 请求"></a>PUT 请求</h5><p>PUT 请求和 POST 请求类似，将类型改为 PUT 就可以了</p>
<h5 id="OPTIONS-请求"><a href="#OPTIONS-请求" class="headerlink" title="OPTIONS 请求"></a>OPTIONS 请求</h5><p>OPTIONS 请求用来探测接口支持哪些 http 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;HttpMethod&gt; <span class="title">optionsForAllow</span><span class="params">(String url, Object... uriVariables)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;HttpMethod&gt; <span class="title">optionsForAllow</span><span class="params">(String url, Map&lt;String, ?&gt; uriVariables)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;HttpMethod&gt; <span class="title">optionsForAllow</span><span class="params">(URI url)</span></span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>知识</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>基本操作</title>
    <url>/2022/01/14/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="HEXO博客操作"><a href="#HEXO博客操作" class="headerlink" title="HEXO博客操作"></a>HEXO博客操作</h2><p>1）下面文章属于三个分类：日常 &gt; 生活，日常 &gt; 随想，日记<br>2）其中生活、随想为日常的子分类，日常和日记为同级分类</p>
<span id="more"></span>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css">
<script src="https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js"></script>

    <div id="aplayer-mxDMSfvx" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1868837988" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555" data-volume="0.1"
    ></div>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><strong>清除缓存：</strong><code>hexo clean</code></li>
<li><strong>生成静态文件：</strong><code>hexo generate</code>可简写为 <code>hexo g</code></li>
<li><strong>启动服务器：</strong><code>hexo server</code>或者 <code>hexo s</code> 常用参数：<code>-p（--port）</code>重设端口</li>
<li><strong>部署：</strong><code>hexo deploy</code>可简写为<code>hexo d</code>，用于将网站部署到服务器上。（暂时用不到，目前都是在本地，后面我们将博客托管到<code>GitHub Pages</code>或<code>Gitee Pages</code>时才会用到此命令）<br>常用参数：<code>-g（--generate）</code>，<code>hexo d -g</code>部署前预先生成静态文件，等同于 <code>hexo g -d</code></li>
</ul>
<p><strong>一般发布文章或者修改博客后需要这些操作：</strong>清除缓存&gt;生成静态文件&gt;启动服务器，测试没问题后再部署。</p>
<h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>[layout]可以为以下三种：</li>
</ul>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="left">功能</th>
<th align="left">文章路径</th>
</tr>
</thead>
<tbody><tr>
<td align="left">post</td>
<td align="left">新建博文</td>
<td align="left">source/_posts</td>
</tr>
<tr>
<td align="left">page</td>
<td align="left">新建页面（如404，分类）</td>
<td align="left">source</td>
</tr>
<tr>
<td align="left">draft</td>
<td align="left">草稿</td>
<td align="left">source/_drafts</td>
</tr>
</tbody></table>
<p>草稿可通过一下命令发布：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<h4 id="文章模版"><a href="#文章模版" class="headerlink" title="文章模版"></a>文章模版</h4><ul>
<li><p>创建模版</p>
<p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p>
</li>
</ul>
<blockquote>
<p>$ hexo new blog “simon”</p>
</blockquote>
<p> 在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>blog.md</code>，并根据其内容建立文章。</p>
<ul>
<li><p>修改参数</p>
<p>以下是您可以在模版中使用的变量：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">变量</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">layout</td>
<td align="left">布局</td>
</tr>
<tr>
<td align="left">title</td>
<td align="left">标题</td>
</tr>
<tr>
<td align="left">date</td>
<td align="left">文件建立日期</td>
</tr>
</tbody></table>
<h4 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h4><p>就是博文最上方以 <code>---</code> 分隔的那部分。</p>
<p>默认可以使用的Front-matter：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>layout</code></td>
<td align="left">布局</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>title</code></td>
<td align="left">标题</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>date</code></td>
<td align="left">建立日期</td>
<td align="left">文件建立日期</td>
</tr>
<tr>
<td align="left"><code>updated</code></td>
<td align="left">更新日期</td>
<td align="left">文件更新日期</td>
</tr>
<tr>
<td align="left"><code>comments</code></td>
<td align="left">开启文章的评论功能</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left"><code>tags</code></td>
<td align="left">标签（不适用于分页）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>categories</code></td>
<td align="left">分类（不适用于分页）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>permalink</code></td>
<td align="left">覆盖文章网址</td>
<td align="left"></td>
</tr>
</tbody></table>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们可以写成一条命令</span></span><br><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">$ hexo d</span><br><span class="line"><span class="comment">// 创建tags页</span></span><br><span class="line">hexo n page tags </span><br></pre></td></tr></table></figure>

<h2 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure>



<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a>可能的问题</h3><p>安装插件后目录下的中文目录出现问题</p>
<p>解决方法：在主题文件下的aplayer加入下列代码</p>
<p>​    <code>aplayer:</code></p>
<p> <code>meting: true</code></p>
<p> <code>asset_inject: false</code></p>
<p>但是会导致插件失灵，无法载入音乐</p>
<h3 id="标签参数"><a href="#标签参数" class="headerlink" title="标签参数"></a>标签参数</h3><ul>
<li><code>title</code> : 曲目标题</li>
<li><code>author</code>: 曲目作者</li>
<li><code>url</code>: 音乐文件 URL 地址</li>
<li><code>picture_url</code>: (可选) 音乐对应的图片地址</li>
<li><code>narrow</code>: （可选）播放器袖珍风格</li>
<li><code>autoplay</code>: (可选) 自动播放，移动端浏览器暂时不支持此功能</li>
<li><code>width:xxx</code>: (可选) 播放器宽度 (默认: 100%)</li>
<li><code>lrc:xxx</code>: （可选）歌词文件 URL 地址</li>
</ul>
<p>当开启 Hexo 的 <a href="https://hexo.io/zh-cn/docs/asset-folders.html#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9">文章资源文件夹</a> 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;picture.jpg&quot; &quot;lrc:caffeine.txt&quot; %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="播放列表"><a href="#播放列表" class="headerlink" title="播放列表"></a>播放列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% aplayerlist %&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;narrow&quot;: false,                          // （可选）播放器袖珍风格</span><br><span class="line">    &quot;autoplay&quot;: true,                         // （可选) 自动播放，移动端浏览器暂时不支持此功能</span><br><span class="line">    &quot;mode&quot;: &quot;random&quot;,                         // （可选）曲目循环类型，有 &#x27;random&#x27;（随机播放）, &#x27;single&#x27; (单曲播放), &#x27;circulation&#x27; (循环播放), &#x27;order&#x27; (列表播放)， 默认：&#x27;circulation&#x27; </span><br><span class="line">    &quot;showlrc&quot;: 3,                             // （可选）歌词显示配置项，可选项有：1,2,3</span><br><span class="line">    &quot;mutex&quot;: true,                            // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class="line">    &quot;theme&quot;: &quot;#e6d0b2&quot;,	                      // （可选）播放器风格色彩设置，默认：#b7daff</span><br><span class="line">    &quot;preload&quot;: &quot;metadata&quot;,                    // （可选）音乐文件预载入模式，可选项： &#x27;none&#x27; &#x27;metadata&#x27; &#x27;auto&#x27;, 默认: &#x27;auto&#x27;</span><br><span class="line">    &quot;listmaxheight&quot;: &quot;513px&quot;,                 // (可选) 该播放列表的最大长度</span><br><span class="line">    &quot;music&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;title&quot;: &quot;CoCo&quot;,</span><br><span class="line">            &quot;author&quot;: &quot;Jeff Williams&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;caffeine.mp3&quot;,</span><br><span class="line">            &quot;pic&quot;: &quot;caffeine.jpeg&quot;,</span><br><span class="line">            &quot;lrc&quot;: &quot;caffeine.txt&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;title&quot;: &quot;アイロニ&quot;,</span><br><span class="line">            &quot;author&quot;: &quot;鹿乃&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;irony.mp3&quot;,</span><br><span class="line">            &quot;pic&quot;: &quot;irony.jpg&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure>

<p>有关 <code>&#123;% meting %&#125;</code> 的选项列表如下:</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td><strong>必须值</strong></td>
<td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td>
</tr>
<tr>
<td>server</td>
<td><strong>必须值</strong></td>
<td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td>
</tr>
<tr>
<td>type</td>
<td><strong>必须值</strong></td>
<td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td>
</tr>
<tr>
<td>fixed</td>
<td><code>false</code></td>
<td>开启固定模式</td>
</tr>
<tr>
<td>mini</td>
<td><code>false</code></td>
<td>开启迷你模式</td>
</tr>
<tr>
<td>loop</td>
<td><code>all</code></td>
<td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td>
</tr>
<tr>
<td>order</td>
<td><code>list</code></td>
<td>列表播放模式： <code>list</code>, <code>random</code></td>
</tr>
<tr>
<td>volume</td>
<td>0.7</td>
<td>播放器音量</td>
</tr>
<tr>
<td>lrctype</td>
<td>0</td>
<td>歌词格式类型</td>
</tr>
<tr>
<td>listfolded</td>
<td><code>false</code></td>
<td>指定音乐播放列表是否折叠</td>
</tr>
<tr>
<td>storagename</td>
<td><code>metingjs</code></td>
<td>LocalStorage 中存储播放器设定的键名</td>
</tr>
<tr>
<td>autoplay</td>
<td><code>true</code></td>
<td>自动播放，移动端浏览器暂时不支持此功能</td>
</tr>
<tr>
<td>mutex</td>
<td><code>true</code></td>
<td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td>
</tr>
<tr>
<td>listmaxheight</td>
<td><code>340px</code></td>
<td>播放列表的最大长度</td>
</tr>
<tr>
<td>preload</td>
<td><code>auto</code></td>
<td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td>
</tr>
<tr>
<td>theme</td>
<td><code>#ad7a86</code></td>
<td>播放器风格色彩设置</td>
</tr>
</tbody></table>
<h2 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h2><p>标签页和分类页添加type后没有效果，需要再添加layout</p>
<p><code>type: &quot;categories&quot;</code><br><code>layout: &quot;categories&quot;</code></p>
<h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><ul>
<li><p>有时候我们可能需要写一些私密的博客，通过密码验证的方式让人不能随意浏览。</p>
</li>
<li><p>这在wordpress，emlog或其他博客系统中都很容易实现，然而hexo除外。</p>
</li>
<li><p>为了解决这个问题，需要安装“ hexo-blog-encrypt”扩展。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>一旦你输入了正确的密码，它就会被存储在本地浏览器的localStorage中。按个按钮，密码将会被清空。若博客中有脚本，它将被正确地执行。</li>
<li>支持按标签加密。</li>
<li>所有的核心功能都是由原生的API所提供的。在Node.js中，我们使用Crypto。在浏览器中，我们使用Web Crypto API。</li>
<li>PBKDF2，SHA256被用作复制密钥，AES256-CBC被用作加解密，我们还使用HMAC来验证密文的来源，并确保其纠正。</li>
<li>广泛地使用Promise来进行异步操作，从而确保线程不被杜塞。</li>
<li>过时的浏览器将无法正常显示，因此要浏览器。</li>
</ul>
</li>
</ul>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">tags:</span><br><span class="line">- 分享</span><br><span class="line">date: <span class="number">2020</span>-<span class="number">10</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">14</span>:<span class="number">21</span></span><br><span class="line">password: <span class="number">123456</span></span><br><span class="line"><span class="keyword">abstract</span>: 这里有东西被加密了，需要输入密码查看哦。</span><br><span class="line">message: 您好，这里需要密码。</span><br><span class="line">wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。</span><br><span class="line">wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>PS技巧</title>
    <url>/2022/01/16/PS%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h3 id="混合颜色带"><a href="#混合颜色带" class="headerlink" title="混合颜色带"></a>混合颜色带</h3><p>混合颜色带是混合选项中的一项功能，通过它可以快速选择火焰、烟花、云彩、闪电等色调与背景之间有较大差异的对象。</p>
<p>通过设置混合颜色带中的通道选项，拖动混合滑块等可以快速隐藏背景，只在画面中显示主体对象，被急藏的区域也可根据需要随时恢复显示。</p>
<span id="more"></span>


    <div id="aplayer-lLFQrcgb" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="1403774122" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555" data-volume="0.1"
    ></div>

<h4 id="参数解读"><a href="#参数解读" class="headerlink" title="参数解读"></a><strong>参数解读</strong></h4><p><img src="/image/1.png"></p>
<p>a）在”混合颜色带”下拉列表中可以选择控制混合效果的颜色通道。“灰色”表示使用全部颜色通道控制混合效果。</p>
<p><img src="/image/image-20220116124749233.png"></p>
<p>选择其他通道后，PS会依据当前设置的通道颜色信息来确定参与混合的像素。</p>
<p>b）对话框中还包含了两组混合滑块，即：”本图层”滑块、“下一图层”滑块，它们用来控制当前图层和下面图层在最终的图像中显示的像素。通过移动混合滑块，可根据图像的亮度范围快速创建透明区域。</p>
<p><img src="/image/image-20220116124814240.png"></p>
<p>还可定义部分混合像素的范围，从而在混合区域和非混合区域之间产生一种平滑的过渡效果。</p>
<p>c）**”本图层”指的是当前操作的图层**，拖动”本图层”滑块可以隐藏当前图层中的图像。</p>
<ul>
<li>将左侧的黑色滑块向中间移动时，当前图层中色调较暗的像素会逐渐变为透明；</li>
<li>将右侧的白色滑块向中间移动时，当前图层中色调较亮的像素会逐渐变为透明；</li>
</ul>
<p>d）**”下一图层”指的是位于当前图层下面的那一个图层**。移动”下一图层”滑块可以显示下面图层中的的图像。</p>
<ul>
<li>将左侧的黑色滑块向中间移动时，可以逐渐显示下面图层中较暗的像素；</li>
<li>将右侧的白色滑块向中间拖动时，可以逐渐显示下面图层中较亮的像素；</li>
</ul>
<p><strong>【小总结】</strong>：用一句简单的话总结，就是：”本图层”负责隐藏，而”下一图层”负责显示。</p>
<p>e）<strong>按住Alt键单击滑块，可以将其分离</strong>。增加分离后的两个滑块的距离可以在透明区域与非透明区域之间创建平滑的过渡。</p>
<p><strong>【注意】</strong>：<strong>在通过混合滑块选取对象时，它只是将背景图像隐藏，并不是真正地将其删除</strong>。被隐藏的图像是可以恢复的。</p>
<p>重新打开”图层样式”对话框后，将滑块拖回原来的起始位置便可以将隐藏的图像显示出来。</p>
<h4 id="数字的含义"><a href="#数字的含义" class="headerlink" title="数字的含义"></a>数字的含义</h4><p>在”混合颜色带”中，”本图层”和”下一图层”都包含一个渐变条，它们分别代表当前图层中的图像和下面图层中图像的亮度范围，从0（黑）到255（白）。</p>
<p>在默认状态下，黑色滑块位于渐变条的最左侧，它上面的数字为0，白色滑块位于渐变条的最右侧，它上面的数字为255。</p>
<p>拖动黑色滑块可设置亮度范围的最低值，拖动白色滑块可设置亮度范围的最高值。拖动某一滑块时，该滑块上方的数字就会发生改变，通过观察数字可以准确地判断出图像中有哪些像素参与了混合，哪些像素被排除在混合效果之外。</p>
<p><strong>黑色滑块用来设置亮度范围的最低值，因此，如果将该滑块拖动至128处，所有亮度值低于128的像素都将变为透明区域。</strong></p>
<p><strong>白色滑块用来设置亮度范围的最高值，因此，如果将白色滑块拖动至128处，则所有亮度值大于128的像素将变为透明区域。</strong></p>
<p>“下一图层”渭块用来控制下面的图层将在最终图像中混合的像素范围，通过移动滑块可以在混合结果中显示下面图层中的图像。</p>
<p><strong>将”下一图层”中的黑色滑块拖动到128处时，下一图层中亮度值低于128的像素将透过当前图层显示出来。</strong></p>
<p><strong>将”下一图层”中的白色滑块拖动到128处时，下一图层中亮度值高于128的像素将透过当前图层显示出来。</strong></p>
<p>如果按住Alt键单击滑块，滑块就可分离。被分开的滑块上方也会出现与之对应的数字，它们代表了部分混合的像素范围。</p>
<h3 id="速度线"><a href="#速度线" class="headerlink" title="速度线"></a>速度线</h3><p>1.新建图层，拉出黑白渐变</p>
<p>2.滤镜-扭曲-波浪，类型选方形，波长控制线条疏密度，波幅控制线条清晰度</p>
<p>3.滤镜-扭曲-极坐标</p>
<h3 id="蒙版"><a href="#蒙版" class="headerlink" title="蒙版"></a>蒙版</h3><p>图层蒙版、剪贴蒙版、矢量蒙版、快速蒙版<br>Alt单机蒙版的缩略图放大或退出蒙版视图<br>Shift  单击蒙版的缩略图使蒙版可用或不可用<br>Shift+Alt单机的缩略图进入或退出快速蒙版模式<br>Ctrl单击蒙版缩略图创建蒙版选区<br>Ctrl+Shift+Alt单击蒙版缩略图，反向选择蒙版选</p>
<p>黑透白不透，灰半透</p>
<h3 id="修改图片上的文字"><a href="#修改图片上的文字" class="headerlink" title="修改图片上的文字"></a>修改图片上的文字</h3><p>字体可以去识字体网站上搜索，大多是宋体或黑体<br>文字转换为智能对象，根据图片情况，选择添加杂色、高斯模糊、方框模糊等效果<br><strong>智能对象可以进行效果进行不透明度等调整</strong></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>抠图</tag>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>常用网页</title>
    <url>/2022/01/24/%E5%B8%B8%E7%94%A8%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<p>各个软件组件程序框架的官方网站</p>
<span id="more"></span>

<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p><a href="https://cn.vuejs.org/index.html">Vue</a>前端常用框架</p>
<p><a href="https://element.eleme.io/#/zh-CN">Element</a>饿了么前端团队推出的一款基于<code>Vue.js 2.0</code> 的桌面端UI框架，手机端有对应框架是Mint UI</p>
<p><a href="https://echarts.apache.org/zh/index.html">EChart</a>一个基于 JavaScript 的开源可视化图表库</p>
<p><a href="https://codepen.io/">CodePen</a>开源前端页面样式</p>
<p><a href="https://hexo.io/zh-cn/">Hexo</a>用来搭建个人博客</p>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p><a href="https://pypi.org/">Pypi</a>Python第三方库查询</p>
<p><a href="https://spring.io/projects/spring-boot">SpringBoot</a>springboot官网</p>
<p><a href="https://mvnrepository.com/">Maven中央仓库</a>maven仓库</p>
<p><a href="https://www.webjars.org/">webjars</a>前端扩展包</p>
<p><a href="https://www.thymeleaf.org/index.html">Thymeleaf</a>Java 模板引擎，适用于 Web 和独立环境</p>
<p><a href="https://baomidou.com/">MyBatis-Plus</a>MyBatis-Plus官网</p>
<h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p><a href="https://www.officeplus.cn/List.shtml?cat=PPT">Office模板</a>微软官方ppt、word、excel各样模板</p>
<p><a href="http://docs.pixologic.com/">ZBrush</a>zbrush官网</p>
<p><a href="https://www.aplaybox.com/">模之屋</a>国内MMD资源网站</p>
<p><a href="https://greasyfork.org/zh-CN">油猴脚本</a>为浏览器添加各种脚本</p>
<p><a href="http://www.pickfree.cn/">Pickfree</a>汇总免费资源的导航网站</p>
<p><a href="https://www.superbed.cn/">聚合图床</a>上传图片为其生成域名链接</p>
<p><a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN">Chrome网上应用店</a>谷歌浏览器插件</p>
<p><a href="https://app.wombo.art/">AI作画</a>输入主题选择风格生成作画</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>😨😨🤡😨😨</title>
    <url>/2022/01/18/%F0%9F%98%A8%F0%9F%A4%A1%F0%9F%98%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="你再想想😡😡😡" data-whm="😨😨😨">
  <script id="hbeData" type="hbeData" data-hmacdigest="bb96fb423446198ddfb68742b113616449f096adc744068c6d6f7ac91b818772"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Tip:艾尔登法环的发售日期，格式：2000-1-10</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>🤡</category>
      </categories>
      <tags>
        <tag>🤡</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机基础知识</title>
    <url>/2022/01/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>记录计算机知识</p>
<span id="more"></span>

<h3 id="Status-Code"><a href="#Status-Code" class="headerlink" title="Status Code"></a>Status Code</h3><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_jpg/2BGWl1qPxib3w4iaa1dxLmRBUf2bDicgvnO10E3VvP0R2eIDzlQv5H34mCVJCicibsFBfXcEqlfnLyJhMdfRPMz6lIQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p>
<h3 id="Cookie、Session、Token区别"><a href="#Cookie、Session、Token区别" class="headerlink" title="Cookie、Session、Token区别"></a>Cookie、Session、Token区别</h3><p>sessionid是存在服务器内存里，session保存的用户信息存在服务器内存或数据库，<br>cookie接收保存服务器发来的sessionid，然后每次浏览器发送请求就会带上cookie的数据。<br>token是服务器加密的用户信息，服务器将token发给浏览器，浏览器用cookie或storage保存cookie。然后浏览器每次发送请求就带上token，服务器将其解密并确认用户登录。</p>
<h3 id="TCP三次握手和四次挥手"><a href="#TCP三次握手和四次挥手" class="headerlink" title="TCP三次握手和四次挥手"></a>TCP三次握手和四次挥手</h3><p>三次握手：<br>A：是B吗？我要跟你通信，听得到我说话吗？    //发送SYN包<br>B：可以通信，你听得到我说话吗？                    //返回SYN+ACK包<br>A：我也听得到。                                                //响应ACK，确认收到SYN</p>
<p>为什么不是二次握手？</p>
<p>因为，如果第一次握手因某些原因未达到服务器，在某个网络节点滞留，客户端重发SYN包，服务器返回SYN+ACK，成功建立连接，原先滞留的网络节点恢复发送服务端SYN包，服务端认为是两个连接，而客户端认为是一个连接，造成状态不一致，因此三次握手解决了网络信道不可靠问题。</p>
<p>一包数据有可能被拆成多包发送，如何处理丢包问题；这些包到达顺序不同，如何处理乱序问题</p>
<p>TCP协议为每个连接建立一个发送缓冲区，从建立连接后的第一个字节序列号为0，后面每个字节序列号加1，<strong>发送数据时</strong>，从发送缓冲区取一部分数据组成发送报文，在其tcp协议中附带序列号和长度，<strong>接收端收到数据后</strong>，需要回复确认报文，确认报文中的ACK=接收序列号+长度=下一包要发送的起始序列号，这样一问一答的发送方式，能够使发送端确认发送的数据已经被对方收到，发送端也可以一次发送连续的多包数据，接收端只需要回复一次ACK就可以，<strong>假设其中丢失了某些包</strong>，丢失了100-299这200个字节，接收端向发送端发送ACK=100的报文，发送端收到后重传这一包数据，<strong>tcp连接是全双工的，两端均采用上述机制。</strong></p>
<p><img src="/image/image-20220118103053549.png"></p>
<p>四次挥手：<br>A：呼叫B，我要跟你断开。                //发送FIN包<br>B：知道了，等一下我还有话没说完    //发送ACK包<br>B：我说完了，可以断开了                 //发送FIN包<br>A：好的                                              //发送ACK包</p>
<p><img src="/image/image-20220118103309671.png"></p>
<table>
<thead>
<tr>
<th>区别</th>
<th>TCP</th>
<th>UDP</th>
</tr>
</thead>
<tbody><tr>
<td>性能损耗</td>
<td>多</td>
<td>少</td>
</tr>
<tr>
<td>CPU资源占用</td>
<td>多</td>
<td>少</td>
</tr>
<tr>
<td>传输稳定性</td>
<td>强</td>
<td>弱</td>
</tr>
<tr>
<td>应用场景</td>
<td>对网络通讯质量要求较高，需要准确无误</td>
<td>适用于实时性要求较高，对少量丢包没要太大要求</td>
</tr>
<tr>
<td>实际应用</td>
<td>传输文件、发送邮件、浏览网页</td>
<td>域名查询、语音通话、视频直播、隧道网络</td>
</tr>
</tbody></table>
<h3 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h3><table>
<thead>
<tr>
<th></th>
<th>GET</th>
<th>POST</th>
</tr>
</thead>
<tbody><tr>
<td>含义</td>
<td>检索&amp;&amp;获取</td>
<td>创建||更新</td>
</tr>
<tr>
<td>大小</td>
<td>2048字节</td>
<td>没有限制</td>
</tr>
<tr>
<td>安全性</td>
<td>显示在地址栏</td>
<td>不显示在地址栏</td>
</tr>
<tr>
<td>提交方式</td>
<td>通过URL</td>
<td>放置在HTML header内</td>
</tr>
</tbody></table>
<p><strong>http://</strong><font color="red">华莱士</font>/<font color="blue">菜单</font>？<font color="orange">巨无霸套餐=1份</font></p>
<p><strong>http://</strong><font color="red"><a href="http://www.mcdonalds.com/">www.mcdonalds.com</a></font>/<font color="blue">menu</font>？<font color="orange">bigmac=1份</font></p>
<p>华莱士=域名 菜单=路径 巨无霸套餐=请求的参数</p>
<h3 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h3><p>谷歌浏览器常用版本URL限制是2048个字符</p>
<p>2MB = 2048KB，1KB = 1024字节，1Byte = 8 bit</p>
<p><strong>「函数」和「函数内部能访问到的变量」的总和，就是一个闭包。</strong></p>
<p>Javascript中0.1 + 0.2 = 0.30000000000000004</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记</title>
    <url>/2022/01/27/Vue%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="ElementUI安装"><a href="#ElementUI安装" class="headerlink" title="ElementUI安装"></a>ElementUI安装</h3><p>1.在Vue项目目录下 输入  npm install element-ui -S<br>2.在main.js文件中 引入 element 组件 ：</p>
<p>import ElementUI from ‘element-ui’<br>import ‘element-ui/lib/theme-chalk/index.css’;<br>Vue.use(ElementUI)</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h5 id="component-has-been-registered-but-not-used-vue-no-unused-components"><a href="#component-has-been-registered-but-not-used-vue-no-unused-components" class="headerlink" title="component has been registered but not used  vue/no-unused-components"></a>component has been registered but not used  vue/no-unused-components</h5><p>组件导入了，且再componets中注册了，也在模板中使用了 ，但是依然报错：error The “Form” component has been registered but not used vue/no-unused-components，组件注册了，但是没有使用。</p>
<p>解决方法：将模板中的组件名首字母改成大写（因为组件名称只有一个驼峰）</p>
<h3 id="跳转页面"><a href="#跳转页面" class="headerlink" title="跳转页面"></a>跳转页面</h3><p>1.在Vue项目目录下 输入  npm install vue-router<br>2.在main.js文件中 引入 vue-router组件 ：</p>
<p>import VueRouter from ‘vue-router’;<br>import router from ‘./router’;(配置router，新建router文件夹创建index.js文件)<br>Vue.use(VueRouter)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;		<span class="comment">//引入router插件</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;../components/Login&#x27;</span>	<span class="comment">//引入要跳转的页面</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Menu <span class="keyword">from</span> <span class="string">&#x27;../components/Menu&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    <span class="attr">base</span>: process.env.BASE_URL,</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/Home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:Home</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">          <span class="comment">// route level code-splitting</span></span><br><span class="line">          <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">          <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">          <span class="attr">component</span>: Login</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/Menu&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:Menu</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 10px; width: 90%&quot;</span> &gt;</span></span><br><span class="line">    //router-link点击会跳转到指定链接</span><br><span class="line">     <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/Login&quot;</span>&gt;</span>demo2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/Home&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    //router-view会显示指令链接的内容</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在App.vue的template中使用<Menu>，menu.vue中的template输入上面代码引用指定链接页面</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>Vue</tag>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>项目踩坑记录</title>
    <url>/2022/01/28/%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>实操从零搭建项目的步骤以及整个过程中遇到的问题</p>
<span id="more"></span>

<h3 id="前后端分离，完成管理系统的CRUD"><a href="#前后端分离，完成管理系统的CRUD" class="headerlink" title="前后端分离，完成管理系统的CRUD"></a>前后端分离，完成管理系统的CRUD</h3><p>前端使用Vue框架，element-ui完成ui以及布局，jquery和ajax来与后端进行交互<br>后端使用springboot框架，mybatis-plus进行数据库操作，mybatis-plus-generator依赖自动生成代码</p>
<h4 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h4><h5 id="大概步骤"><a href="#大概步骤" class="headerlink" title="大概步骤"></a>大概步骤</h5><p>①在要生成项目的文件夹下打开cm执行<code>vue create vue_test</code><br>②在项目目录下安装模块，<br>npm install element-ui -S<br>npm install jquery –save<br>③在App.vue引入模块<br><code>import ElementUI from &#39;element-ui&#39;</code><br><code>import &#39;element-ui/lib/theme-chalk/index.css&#39;;</code><br><code>import$ from ``&#39;jquery&#39;</code><br>④开始编写前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;element.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 80%; margin: 0 auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户信息表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 10px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 70%&quot;</span> @<span class="attr">keyup.enter.native</span>=<span class="string">&quot;loadTable(1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:data</span>=<span class="string">&quot;page.records&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">stripe</span></span></span><br><span class="line"><span class="tag">            <span class="attr">border</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;sex&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;phone&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;电话&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">fixed</span>=<span class="string">&quot;right&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">circle</span> @<span class="attr">click</span>=<span class="string">&quot;edit(scope.row)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">circle</span> @<span class="attr">click</span>=<span class="string">&quot;del(scope.row.id)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">type</span>=<span class="string">&quot;flex&quot;</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 10px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">                <span class="attr">layout</span>=<span class="string">&quot;prev, pager, next&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:page-size</span>=<span class="string">&quot;pageSize&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:current-page</span>=<span class="string">&quot;pageNum&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">prev-click</span>=<span class="string">&quot;loadTable&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">current-change</span>=<span class="string">&quot;loadTable&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">next-click</span>=<span class="string">&quot;loadTable&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:total</span>=<span class="string">&quot;page.totalElements&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span></span></span><br><span class="line"><span class="tag">            <span class="attr">title</span>=<span class="string">&quot;用户信息&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogVisible&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">width</span>=<span class="string">&quot;30%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;form.sex&quot;</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;form.sex&quot;</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;电话&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.phone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible = false&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;save&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;element.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">page</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">pageNum</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">pageSize</span>: <span class="number">8</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">dialogVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">form</span>: &#123;&#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.loadTable(<span class="built_in">this</span>.pageNum);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">loadTable</span>(<span class="params">num</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.pageNum = num;</span></span><br><span class="line"><span class="javascript">                $.get(<span class="string">&quot;/user/page?pageNum=&quot;</span> + <span class="built_in">this</span>.pageNum + <span class="string">&quot;&amp;pageSize=&quot;</span> + <span class="built_in">this</span>.pageSize + <span class="string">&quot;&amp;name=&quot;</span> + <span class="built_in">this</span>.name).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.page = res.data;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.dialogVisible = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.form = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">edit</span>(<span class="params">row</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.form = row;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.dialogVisible = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">save</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> data = <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.form);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.form.id) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 编辑</span></span></span><br><span class="line"><span class="javascript">                    $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">type</span>: <span class="string">&#x27;put&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">contentType</span>: <span class="string">&#x27;application/json&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">data</span>: data</span></span><br><span class="line"><span class="javascript">                    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dialogVisible = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.loadTable(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 新增</span></span></span><br><span class="line"><span class="javascript">                    $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">contentType</span>: <span class="string">&#x27;application/json&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">data</span>: data</span></span><br><span class="line"><span class="javascript">                    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dialogVisible = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.loadTable(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">del</span>(<span class="params">id</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>: <span class="string">&#x27;/user/&#x27;</span> + id,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>: <span class="string">&#x27;delete&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">contentType</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.loadTable(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>⑤打包Vue，cmd执行<code>npm run build</code>，会生成dist文件夹，里面生成的静态资源直接导入后端项目</p>
<h5 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.get(<span class="string">&quot;/user/page?pageNum=&quot;</span> + <span class="built_in">this</span>.pageNum + <span class="string">&quot;&amp;pageSize=&quot;</span> + <span class="built_in">this</span>.pageSize + <span class="string">&quot;&amp;name=&quot;</span> + <span class="built_in">this</span>.name).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                   <span class="built_in">this</span>.page = res.data;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure>

<p>异步请求时，要注意请求的地址以及请求的结果，通过console.log(this.page)这样的指令来查看请求到的数据在哪</p>
<h4 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h4><h5 id="大概步骤-1"><a href="#大概步骤-1" class="headerlink" title="大概步骤"></a>大概步骤</h5><p>①引入需要的依赖，springboot-web、lombok、mysql这些可以在创建时选择，下面是需要手动导入的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--自动生成代码 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--模板引擎 依赖:mybatis-plus代码生成的时候报异常--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置ApiModel在实体类中不生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spring4all<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-swagger<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>②编写配置文件以及引入静态资源</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/demo?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=GMT%2b8</span></span><br></pre></td></tr></table></figure>

<p>③通过mybatis-plus自动生成代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//我们需要构建一个代码生成器对象</span></span><br><span class="line">    AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">    <span class="comment">//怎么样去执行，配置策略</span></span><br><span class="line">    <span class="comment">//1、全局配置</span></span><br><span class="line">    GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">    String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);<span class="comment">//获取当前目录</span></span><br><span class="line">    gc.setOutputDir(projectPath+<span class="string">&quot;/src/main/java&quot;</span>);<span class="comment">//输出到哪个目录</span></span><br><span class="line">    gc.setAuthor(<span class="string">&quot;sx&quot;</span>);</span><br><span class="line">    gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">    gc.setFileOverride(<span class="keyword">false</span>);<span class="comment">//是否覆盖</span></span><br><span class="line">    gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);<span class="comment">//去Service的I前缀</span></span><br><span class="line">    gc.setIdType(IdType.ASSIGN_ID);</span><br><span class="line">    gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">    gc.setSwagger2(<span class="keyword">true</span>);</span><br><span class="line">    mpg.setGlobalConfig(gc);</span><br><span class="line">    <span class="comment">//2、设置数据源</span></span><br><span class="line">    DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">    dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/demo?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=GMT%2b8&quot;</span>);</span><br><span class="line">    dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    dsc.setDbType(DbType.MYSQL);</span><br><span class="line">    mpg.setDataSource(dsc);</span><br><span class="line">    <span class="comment">//3、包的配置</span></span><br><span class="line">    PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">    pc.setModuleName(<span class="string">&quot;study&quot;</span>); <span class="comment">//生成的文件夹的名</span></span><br><span class="line">    pc.setParent(<span class="string">&quot;com.op&quot;</span>);	<span class="comment">//生成的文件夹的父文件夹</span></span><br><span class="line">    pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">    pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">    pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">    pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">    mpg.setPackageInfo(pc);</span><br><span class="line">    <span class="comment">//4、策略配置</span></span><br><span class="line">    StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">    strategy.setInclude(<span class="string">&quot;user&quot;</span>);<span class="comment">//设置要映射的表名,只需改这里即可</span></span><br><span class="line">    strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">    strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">    strategy.setEntityLombokModel(<span class="keyword">true</span>);<span class="comment">//是否使用lombok开启注解</span></span><br><span class="line">    strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">    <span class="comment">//自动填充配置</span></span><br><span class="line">    TableFill gmtCreate = <span class="keyword">new</span> TableFill(<span class="string">&quot;gmt_create&quot;</span>, FieldFill.INSERT);</span><br><span class="line">    TableFill gmtUpdate = <span class="keyword">new</span> TableFill(<span class="string">&quot;gmt_update&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">    ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    tableFills.add(gmtCreate);</span><br><span class="line">    tableFills.add(gmtUpdate);</span><br><span class="line">    strategy.setTableFillList(tableFills);</span><br><span class="line">    <span class="comment">//乐观锁配置</span></span><br><span class="line">    strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">    strategy.setRestControllerStyle(<span class="keyword">true</span>);<span class="comment">//开启驼峰命名</span></span><br><span class="line">    strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);<span class="comment">//localhost:8080/hello_id_2</span></span><br><span class="line">    mpg.setStrategy(strategy);</span><br><span class="line">    mpg.execute();<span class="comment">//执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>④在springboot启动类上开启mapper注解，注意路径要对</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.op.study.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MybatisPlus分页配置需要的代码，在启动类中添加</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>⑤开始实现服务类和控制类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务类  </span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        userMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 查询单个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Long id)</span></span>&#123;<span class="keyword">return</span> userMapper.selectById(id);&#125;</span><br><span class="line"><span class="comment">// 查询全部</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;User&gt; <span class="title">findPage</span><span class="params">(Integer pageNum, Integer pageSize, String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(pageNum,pageSize);</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 控制类</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        userService.save(user);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">updata</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        userService.updateById(user);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 查询单个</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;User&gt; <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123; <span class="keyword">return</span> Result.success(userService.findById(id));&#125;</span><br><span class="line"><span class="comment">// 查询全部</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;User&gt;&gt; findAll()&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(userService.findAll());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 分类查询</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Page&lt;User&gt;&gt; findPage(</span><br><span class="line">            <span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer pageNum, </span><br><span class="line">            <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize,</span><br><span class="line">            <span class="meta">@RequestParam(required = false)</span> String name)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(userService.findPage(pageNum, pageSize,name));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>MyBatis</tag>
        <tag>Vue</tag>
        <tag>ElementUI</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
</search>
